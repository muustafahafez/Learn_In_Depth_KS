
Final_GP_V22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800401c  0800401c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800401c  0800401c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000024  08004048  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000598  08004048  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bff4  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e64  00000000  00000000  0002c041  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002dea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e79  00000000  00000000  0002f630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a30f  00000000  00000000  000474a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b428  00000000  00000000  000517b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcbe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  000dcc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f9c 	.word	0x08003f9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	08003f9c 	.word	0x08003f9c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009fc:	f1a2 0201 	sub.w	r2, r2, #1
 8000a00:	d1ed      	bne.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_f2uiz>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	d20e      	bcs.n	8000b7e <__aeabi_f2uiz+0x22>
 8000b60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b64:	d30b      	bcc.n	8000b7e <__aeabi_f2uiz+0x22>
 8000b66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b6e:	d409      	bmi.n	8000b84 <__aeabi_f2uiz+0x28>
 8000b70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b78:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7c:	4770      	bx	lr
 8000b7e:	f04f 0000 	mov.w	r0, #0
 8000b82:	4770      	bx	lr
 8000b84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b88:	d101      	bne.n	8000b8e <__aeabi_f2uiz+0x32>
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_f2uiz+0x38>
 8000b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ffc2 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HardFault_Handler>:
#include "stm32f103xb.h"
#include "SysTick.h"

unsigned char SysTickLED ;
void HardFault_Handler (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	while(1) ;
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3a <MemManage_Handler>:
}
void	MemManage_Handler (void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
	while(1) ;
 8000c3e:	e7fe      	b.n	8000c3e <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:
}
void	BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	while(1) ;
 8000c44:	e7fe      	b.n	8000c44 <BusFault_Handler+0x4>

08000c46 <UsageFault_Handler>:
}
void	UsageFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
	while(1) ;
 8000c4a:	e7fe      	b.n	8000c4a <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:


__attribute ((naked)) void SVC_Handler ()
{
	//	SWITCH_CPU_AccessLevel (privileged);
	__asm ("tst lr, #4 \n\t"
 8000c4c:	f01e 0f04 	tst.w	lr, #4
 8000c50:	bf0c      	ite	eq
 8000c52:	f3ef 8008 	mrseq	r0, MSP
 8000c56:	f3ef 8009 	mrsne	r0, PSP
 8000c5a:	f000 bbc7 	b.w	80013ec <OS_SVC>
			"ITE EQ \n\t" //To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
			"mrseq r0,MSP \n\t "
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000c5e:	bf00      	nop

08000c60 <trigger_OS_PendSV>:

}


void trigger_OS_PendSV()
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <trigger_OS_PendSV+0x18>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <trigger_OS_PendSV+0x18>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6053      	str	r3, [r2, #4]

}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Start_Ticker>:


void Start_Ticker()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	// 1 count -> 1/72
	// desired = 1000


//	SysTick_voidInit();
	SysTick_voidStart();
 8000c80:	f000 fca8 	bl	80015d4 <SysTick_voidStart>

//	 SysTick_Config(72000);

	 SysTick_Config(72000);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <Start_Ticker+0x14>)
 8000c86:	f7ff ffb3 	bl	8000bf0 <SysTick_Config>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	00011940 	.word	0x00011940

08000c94 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	SysTickLED ^= 1 ;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SysTick_Handler+0x24>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Handler+0x24>)
 8000ca4:	701a      	strb	r2, [r3, #0]
	MYRTOS_Update_TasksWaitingTime();
 8000ca6:	f000 fc51 	bl	800154c <MYRTOS_Update_TasksWaitingTime>
	//Determine Pcurrent & Pnext
	Decide_whatNext();
 8000caa:	f000 fb4d 	bl	8001348 <Decide_whatNext>
	//Switch Context & restore
	trigger_OS_PendSV();
 8000cae:	f7ff ffd7 	bl	8000c60 <trigger_OS_PendSV>

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000004c 	.word	0x2000004c

08000cbc <DistanceToSpeed>:
#define NULL	(void*)0
#endif


uint8_t DistanceToSpeed(DisToSpd_Parameters_t* Parameters,uint16_t Copy_u16CurrentDistance)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]

	uint8_t Local_u8Speed=0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
	if(Parameters!=NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d018      	beq.n	8000d04 <DistanceToSpeed+0x48>
	{

		Local_u8Speed=(((Copy_u16CurrentDistance-Parameters->copy_u16MinDistance)*(Parameters->copy_u16MaxSpeed-Parameters->copy_u16MinSpeed))/(Parameters->copy_u16MaxDistance-Parameters->copy_u16MinDistance))+Parameters->copy_u16MinSpeed;
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	7952      	ldrb	r2, [r2, #5]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7912      	ldrb	r2, [r2, #4]
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	fb02 f203 	mul.w	r2, r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	885b      	ldrh	r3, [r3, #2]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	73fb      	strb	r3, [r7, #15]

	}

	return Local_u8Speed;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <FIFO_init>:
 */


#include"MYRTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <FIFO_init+0x16>
		return FIFO_NULL;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e011      	b.n	8000d4a <FIFO_init+0x3a>

	fifo->base = buff ;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 8000d48:	2300      	movs	r3, #0

}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <FIFO_enqueue+0x1a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e02d      	b.n	8000dce <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d107      	bne.n	8000d8e <FIFO_enqueue+0x3a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d101      	bne.n	8000d8e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e01f      	b.n	8000dce <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68d2      	ldr	r2, [r2, #12]
 8000da8:	4611      	mov	r1, r2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6912      	ldr	r2, [r2, #16]
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	440a      	add	r2, r1
 8000db2:	3a04      	subs	r2, #4
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d104      	bne.n	8000dc2 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	e004      	b.n	8000dcc <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	1d1a      	adds	r2, r3, #4
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000dcc:	2300      	movs	r3, #0


}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <FIFO_dequeue+0x1a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e028      	b.n	8000e48 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d101      	bne.n	8000e06 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 8000e02:	2302      	movs	r3, #2
 8000e04:	e020      	b.n	8000e48 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68d2      	ldr	r2, [r2, #12]
 8000e22:	4611      	mov	r1, r2
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6912      	ldr	r2, [r2, #16]
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	440a      	add	r2, r1
 8000e2c:	3a04      	subs	r2, #4
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d104      	bne.n	8000e3c <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	e004      	b.n	8000e46 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1d1a      	adds	r2, r3, #4
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
	...

08000e54 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 8000e54:	4b6f      	ldr	r3, [pc, #444]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e5a:	f3ef 8009 	mrs	r0, PSP
 8000e5e:	4602      	mov	r2, r0
 8000e60:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000e62:	4b6c      	ldr	r3, [pc, #432]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e64:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e68:	699a      	ldr	r2, [r3, #24]
 8000e6a:	3a04      	subs	r2, #4
 8000e6c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000e6e:	4b69      	ldr	r3, [pc, #420]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e70:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4622      	mov	r2, r4
 8000e78:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000e7a:	4b66      	ldr	r3, [pc, #408]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e7c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	3a04      	subs	r2, #4
 8000e84:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000e86:	4b63      	ldr	r3, [pc, #396]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	462a      	mov	r2, r5
 8000e90:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <PendSV_Handler+0x1c0>)
 8000e94:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	3a04      	subs	r2, #4
 8000e9c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ea0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4632      	mov	r2, r6
 8000ea8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000eaa:	4b5a      	ldr	r3, [pc, #360]	; (8001014 <PendSV_Handler+0x1c0>)
 8000eac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	3a04      	subs	r2, #4
 8000eb4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000eb6:	4b57      	ldr	r3, [pc, #348]	; (8001014 <PendSV_Handler+0x1c0>)
 8000eb8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	463a      	mov	r2, r7
 8000ec0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000ec2:	4b54      	ldr	r3, [pc, #336]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ec4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	3a04      	subs	r2, #4
 8000ecc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000ece:	4b51      	ldr	r3, [pc, #324]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ed0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4642      	mov	r2, r8
 8000ed8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000eda:	4b4e      	ldr	r3, [pc, #312]	; (8001014 <PendSV_Handler+0x1c0>)
 8000edc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	3a04      	subs	r2, #4
 8000ee4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ee8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	464a      	mov	r2, r9
 8000ef0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ef4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	3a04      	subs	r2, #4
 8000efc:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f00:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4652      	mov	r2, sl
 8000f08:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000f0a:	4b42      	ldr	r3, [pc, #264]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f0c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	3a04      	subs	r2, #4
 8000f14:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11 " : "=r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000f16:	4b3f      	ldr	r3, [pc, #252]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f18:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	465a      	mov	r2, fp
 8000f20:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if (OS_Control.NextTask != NULL){
 8000f22:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f24:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d009      	beq.n	8000f40 <PendSV_Handler+0xec>
	OS_Control.CurrentTask = OS_Control.NextTask ;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f2e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000f32:	4a38      	ldr	r2, [pc, #224]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f34:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL ;
 8000f38:	4b36      	ldr	r3, [pc, #216]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000f40:	4b34      	ldr	r3, [pc, #208]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f42:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000f4c:	4b31      	ldr	r3, [pc, #196]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f52:	699a      	ldr	r2, [r3, #24]
 8000f54:	3204      	adds	r2, #4
 8000f56:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f66:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f6a:	699a      	ldr	r2, [r3, #24]
 8000f6c:	3204      	adds	r2, #4
 8000f6e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f72:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f7e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	3204      	adds	r2, #4
 8000f86:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f8a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <PendSV_Handler+0x1c0>)
 8000f96:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	3204      	adds	r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fa2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fb2:	699a      	ldr	r2, [r3, #24]
 8000fb4:	3204      	adds	r2, #4
 8000fb6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fc6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	3204      	adds	r2, #4
 8000fce:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fd2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fde:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	3204      	adds	r2, #4
 8000fe6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control.CurrentTask->Current_PSP))  );
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <PendSV_Handler+0x1c0>)
 8000fea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <PendSV_Handler+0x1c0>)
 8000ff6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	3204      	adds	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <PendSV_Handler+0x1c0>)
 8001002:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4618      	mov	r0, r3
 800100a:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 800100e:	4770      	bx	lr

}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	20000050 	.word	0x20000050

08001018 <MYRTOS_IdleTask>:



unsigned char IdleTaskLed ;
void MYRTOS_IdleTask()
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	//
	//		In general, when you want to wait for any type of interrupt, you can use the "wfi" instruction, but if you want to wait for a specific event, you would use the "wfe" instruction, as it allows you to wait for a specific event, rather than any interrupt.
	//
	while(1)
	{
		IdleTaskLed ^= 1 ;
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <MYRTOS_IdleTask+0x18>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b02      	ldr	r3, [pc, #8]	; (8001030 <MYRTOS_IdleTask+0x18>)
 8001028:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800102a:	bf20      	wfe
		IdleTaskLed ^= 1 ;
 800102c:	e7f6      	b.n	800101c <MYRTOS_IdleTask+0x4>
 800102e:	bf00      	nop
 8001030:	20000254 	.word	0x20000254

08001034 <MYRTOS_Create_MainStack>:




void MYRTOS_Create_MainStack()
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <MYRTOS_Create_MainStack+0x34>)
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MYRTOS_Create_MainStack+0x38>)
 800103c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MYRTOS_Create_MainStack+0x38>)
 8001042:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001046:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <MYRTOS_Create_MainStack+0x38>)
 800104c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between Main Task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8);
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MYRTOS_Create_MainStack+0x38>)
 8001052:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001056:	3b08      	subs	r3, #8
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <MYRTOS_Create_MainStack+0x38>)
 800105a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task <&_eheap) Error:excedded the availble stack size
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20005000 	.word	0x20005000
 800106c:	20000050 	.word	0x20000050

08001070 <MYRTOS_init>:

MYRTOS_errorID MYRTOS_init()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend ;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MYRTOS_init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the MAIN Stack for OS
	MYRTOS_Create_MainStack();
 8001082:	f7ff ffd7 	bl	8001034 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO, 100) !=FIFO_NO_ERROR)
 8001086:	2264      	movs	r2, #100	; 0x64
 8001088:	4913      	ldr	r1, [pc, #76]	; (80010d8 <MYRTOS_init+0x68>)
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <MYRTOS_init+0x6c>)
 800108c:	f7ff fe40 	bl	8000d10 <FIFO_init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_init_error ;
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	3301      	adds	r3, #1
 800109a:	71fb      	strb	r3, [r7, #7]
	}

	//Configure IDLE TASK
	strcpy (MYRTOS_idleTask.TaskName, "idleTask");
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MYRTOS_init+0x70>)
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <MYRTOS_init+0x74>)
 80010a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a2:	c303      	stmia	r3!, {r0, r1}
 80010a4:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255 ;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MYRTOS_init+0x78>)
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_IdleTask ;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MYRTOS_init+0x78>)
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <MYRTOS_init+0x7c>)
 80010b0:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300 ;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MYRTOS_init+0x78>)
 80010b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b8:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MYRTOS_init+0x78>)
 80010bc:	f000 f856 	bl	800116c <MYRTOS_CreateTask>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4413      	add	r3, r2
 80010c8:	71fb      	strb	r3, [r7, #7]

	return error ;
 80010ca:	79fb      	ldrb	r3, [r7, #7]

}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000050 	.word	0x20000050
 80010d8:	20000258 	.word	0x20000258
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	2000022c 	.word	0x2000022c
 80010e4:	08003fb4 	.word	0x08003fb4
 80010e8:	20000210 	.word	0x20000210
 80010ec:	08001019 	.word	0x08001019

080010f0 <MyRTOS_Create_TaskStack>:


void MyRTOS_Create_TaskStack(Task_ref* Tref)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP-- ;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	1f1a      	subs	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000;         //DUMMY_XPSR should T =1 to avoid BUS fault;//0x01000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001114:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	1f1a      	subs	r2, r3, #4
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP-- ; //LR = 0xFFFFFFFD (EXC_RETURN)Return to thread with PSP
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	1f1a      	subs	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP)  = 0xFFFFFFFD ;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f06f 0202 	mvn.w	r2, #2
 800113c:	601a      	str	r2, [r3, #0]

	for (int  j=0 ; j< 13 ; j++ )
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e00b      	b.n	800115c <MyRTOS_Create_TaskStack+0x6c>
	{
		Tref->Current_PSP-- ;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	1f1a      	subs	r2, r3, #4
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP)  = 0 ;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	ddf0      	ble.n	8001144 <MyRTOS_Create_TaskStack+0x54>

	}



}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <MYRTOS_CreateTask>:
MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]

	//Create Its OWN PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 800117a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size ;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1ad2      	subs	r2, r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	615a      	str	r2, [r3, #20]
	//	- _E_PSP_Task	-
	//	-				-
	//	- _eheap		-
	//	-				-
	//
	if(Tref->_E_PSP_Task < (unsigned int)(&(_eheap)))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <MYRTOS_CreateTask+0x78>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d201      	bcs.n	800119e <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize ;
 800119a:	2302      	movs	r3, #2
 800119c:	e01b      	b.n	80011d6 <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	3b08      	subs	r3, #8
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 80011a6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_Create_TaskStack( Tref);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa0 	bl	80010f0 <MyRTOS_Create_TaskStack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks]= Tref ;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 80011b2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80011b6:	490a      	ldr	r1, [pc, #40]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++ ;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 80011c0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <MYRTOS_CreateTask+0x74>)
 80011c8:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	//Task State Update -> Suspend
	Tref->TaskState = Suspend ;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]

}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000050 	.word	0x20000050
 80011e4:	20000798 	.word	0x20000798

080011e8 <bubbleSort>:

//Handler
void bubbleSort()
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <bubbleSort+0x8c>)
 80011f0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80011f4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e030      	b.n	800125e <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e023      	b.n	800124a <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <bubbleSort+0x8c>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	791a      	ldrb	r2, [r3, #4]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	4918      	ldr	r1, [pc, #96]	; (8001274 <bubbleSort+0x8c>)
 8001212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d913      	bls.n	8001244 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <bubbleSort+0x8c>)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3301      	adds	r3, #1
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <bubbleSort+0x8c>)
 800122c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001230:	4910      	ldr	r1, [pc, #64]	; (8001274 <bubbleSort+0x8c>)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	490d      	ldr	r1, [pc, #52]	; (8001274 <bubbleSort+0x8c>)
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3301      	adds	r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3d4      	bcc.n	8001202 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3b01      	subs	r3, #1
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3c9      	bcc.n	80011fc <bubbleSort+0x14>
			}

}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000050 	.word	0x20000050

08001278 <MyRTOS_Update_Schadule_tables>:
//Handler
void MyRTOS_Update_Schadule_tables()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	Task_ref* temp =NULL ;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8001286:	f7ff ffaf 	bl	80011e8 <bubbleSort>
	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /* pointer to pointer */)!=FIFO_EMPTY);
 800128a:	bf00      	nop
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	482b      	ldr	r0, [pc, #172]	; (8001340 <MyRTOS_Update_Schadule_tables+0xc8>)
 8001292:	f7ff fda1 	bl	8000dd8 <FIFO_dequeue>
 8001296:	4603      	mov	r3, r0
 8001298:	2b02      	cmp	r3, #2
 800129a:	d1f7      	bne.n	800128c <MyRTOS_Update_Schadule_tables+0x14>

	//3- update ready queue

	while(i< OS_Control.NoOfActiveTasks)
 800129c:	e044      	b.n	8001328 <MyRTOS_Update_Schadule_tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <MyRTOS_Update_Schadule_tables+0xcc>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a25      	ldr	r2, [pc, #148]	; (8001344 <MyRTOS_Update_Schadule_tables+0xcc>)
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d031      	beq.n	8001322 <MyRTOS_Update_Schadule_tables+0xaa>
		{
			//in case we reached to the end of avaliable OSTASKS
			if (PnextTask->TaskState == Suspend)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <MyRTOS_Update_Schadule_tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	481d      	ldr	r0, [pc, #116]	; (8001340 <MyRTOS_Update_Schadule_tables+0xc8>)
 80012cc:	f7ff fd42 	bl	8000d54 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80012d8:	e02e      	b.n	8001338 <MyRTOS_Update_Schadule_tables+0xc0>
			}
			//	if the Ptask priority > nexttask then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	791a      	ldrb	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d208      	bcs.n	80012f8 <MyRTOS_Update_Schadule_tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	4815      	ldr	r0, [pc, #84]	; (8001340 <MyRTOS_Update_Schadule_tables+0xc8>)
 80012ea:	f7ff fd33 	bl	8000d54 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2203      	movs	r2, #3
 80012f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80012f6:	e01f      	b.n	8001338 <MyRTOS_Update_Schadule_tables+0xc0>
			}else if (Ptask->priority == PnextTask->priority)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	791a      	ldrb	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d108      	bne.n	8001316 <MyRTOS_Update_Schadule_tables+0x9e>
			{
				//	if the Ptask priority == nexttask then
				//		push Ptask to ready state
				//	And make the ptask = nexttask  and nexttask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <MyRTOS_Update_Schadule_tables+0xc8>)
 8001308:	f7ff fd24 	bl	8000d54 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001314:	e005      	b.n	8001322 <MyRTOS_Update_Schadule_tables+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	791a      	ldrb	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	791b      	ldrb	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d809      	bhi.n	8001336 <MyRTOS_Update_Schadule_tables+0xbe>
				break ;
			}
		}


		i++ ;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MyRTOS_Update_Schadule_tables+0xcc>)
 800132a:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8b4      	bhi.n	800129e <MyRTOS_Update_Schadule_tables+0x26>
	}

}
 8001334:	e000      	b.n	8001338 <MyRTOS_Update_Schadule_tables+0xc0>
				break ;
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001fc 	.word	0x200001fc
 8001344:	20000050 	.word	0x20000050

08001348 <Decide_whatNext>:
//Otherwise, the next task is dequeued from the ready queue using the FIFO_dequeue function and set to the running state.
//		If the current task has the same priority as the next task and is not suspended, it is added back to the ready queue and its state is set to ready.
//		The selected next task is stored in OS_Control.NextTask.
//Handler Mode
void Decide_whatNext()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <Decide_whatNext+0x98>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11a      	bne.n	800138a <Decide_whatNext+0x42>
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <Decide_whatNext+0x9c>)
 8001356:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800135a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800135e:	2b00      	cmp	r3, #0
 8001360:	d013      	beq.n	800138a <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Decide_whatNext+0x9c>)
 8001364:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001368:	2201      	movs	r2, #1
 800136a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <Decide_whatNext+0x9c>)
 8001370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001374:	4619      	mov	r1, r3
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <Decide_whatNext+0x98>)
 8001378:	f7ff fcec 	bl	8000d54 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <Decide_whatNext+0x9c>)
 800137e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <Decide_whatNext+0x9c>)
 8001384:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8001388:	e027      	b.n	80013da <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800138a:	4917      	ldr	r1, [pc, #92]	; (80013e8 <Decide_whatNext+0xa0>)
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <Decide_whatNext+0x98>)
 800138e:	f7ff fd23 	bl	8000dd8 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <Decide_whatNext+0x9c>)
 8001394:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001398:	2201      	movs	r2, #1
 800139a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <Decide_whatNext+0x9c>)
 80013a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80013a4:	791a      	ldrb	r2, [r3, #4]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <Decide_whatNext+0x9c>)
 80013a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d113      	bne.n	80013da <Decide_whatNext+0x92>
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <Decide_whatNext+0x9c>)
 80013b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80013b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00c      	beq.n	80013da <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <Decide_whatNext+0x9c>)
 80013c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <Decide_whatNext+0x98>)
 80013ca:	f7ff fcc3 	bl	8000d54 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <Decide_whatNext+0x9c>)
 80013d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001fc 	.word	0x200001fc
 80013e4:	20000050 	.word	0x20000050
 80013e8:	200001f4 	.word	0x200001f4

080013ec <OS_SVC>:

//Handler Mode
void OS_SVC(int* Stack_Frame)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return address (PC) and XPSR
	unsigned char SVC_number ;
	SVC_number = *((unsigned char*)(((unsigned char*)Stack_Frame[6])-2)) ;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3318      	adds	r3, #24
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b02      	subs	r3, #2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	73fb      	strb	r3, [r7, #15]

	switch (SVC_number)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db1f      	blt.n	8001446 <OS_SVC+0x5a>
 8001406:	2b01      	cmp	r3, #1
 8001408:	dd02      	ble.n	8001410 <OS_SVC+0x24>
 800140a:	2b02      	cmp	r3, #2
 800140c:	d017      	beq.n	800143e <OS_SVC+0x52>

		break;
	}


}
 800140e:	e01a      	b.n	8001446 <OS_SVC+0x5a>
		MyRTOS_Update_Schadule_tables();
 8001410:	f7ff ff32 	bl	8001278 <MyRTOS_Update_Schadule_tables>
		if (OS_Control.OSmodeID == OsRunning)
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <OS_SVC+0x64>)
 8001416:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800141a:	2b01      	cmp	r3, #1
 800141c:	d112      	bne.n	8001444 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"idleTask") != 0)
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <OS_SVC+0x64>)
 8001420:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001424:	331c      	adds	r3, #28
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <OS_SVC+0x68>)
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fe91 	bl	8000150 <strcmp>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <OS_SVC+0x58>
				Decide_whatNext();
 8001434:	f7ff ff88 	bl	8001348 <Decide_whatNext>
				trigger_OS_PendSV();
 8001438:	f7ff fc12 	bl	8000c60 <trigger_OS_PendSV>
		break;
 800143c:	e002      	b.n	8001444 <OS_SVC+0x58>
		MyRTOS_Update_Schadule_tables();
 800143e:	f7ff ff1b 	bl	8001278 <MyRTOS_Update_Schadule_tables>
		break;
 8001442:	e000      	b.n	8001446 <OS_SVC+0x5a>
		break;
 8001444:	bf00      	nop
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000050 	.word	0x20000050
 8001454:	08003fb4 	.word	0x08003fb4

08001458 <MYRTOS_OS_SVC_Set>:

//Thread Mode
MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d817      	bhi.n	8001498 <MYRTOS_OS_SVC_Set+0x40>
 8001468:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <MYRTOS_OS_SVC_Set+0x18>)
 800146a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146e:	bf00      	nop
 8001470:	08001485 	.word	0x08001485
 8001474:	08001489 	.word	0x08001489
 8001478:	0800148d 	.word	0x0800148d
 800147c:	08001491 	.word	0x08001491
 8001480:	08001495 	.word	0x08001495
	{
	case SVC_Activatetask:
		__asm("svc #0x00");
 8001484:	df00      	svc	0
		break;
 8001486:	e007      	b.n	8001498 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_terminateTask:
		__asm("svc #0x01");
 8001488:	df01      	svc	1
		break;
 800148a:	e005      	b.n	8001498 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 800148c:	df02      	svc	2
		break;
 800148e:	e003      	b.n	8001498 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_AquireMutex:
		__asm("svc #0x03");  //Assignment Task
 8001490:	df03      	svc	3
		break;
 8001492:	e001      	b.n	8001498 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_ReleaseMutex:
		__asm("svc #0x04"); //Assignment Task
 8001494:	df04      	svc	4
		break;
 8001496:	bf00      	nop
	}
}
 8001498:	bf00      	nop
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask (Task_ref* Tref)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting ;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_Activatetask);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff ffcf 	bl	8001458 <MYRTOS_OS_SVC_Set>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <MYRTOS_TaskWait>:
{
	Tref->TaskState = Suspend ;
	MYRTOS_OS_SVC_Set(SVC_terminateTask);
}
void MYRTOS_TaskWait(unsigned int NoTICKS,Task_ref* SelfTref)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
	SelfTref->TimingWaiting.Blocking = Enable ;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimingWaiting.Ticks_Count = NoTICKS ;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
	// Task Should be blocked
	SelfTref->TaskState = Suspend ;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	//to be suspended immediately
	MYRTOS_OS_SVC_Set(SVC_terminateTask);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff ffb8 	bl	8001458 <MYRTOS_OS_SVC_Set>

}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MYRTOS_STARTOS>:



void MYRTOS_STARTOS()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OsRunning ;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MYRTOS_STARTOS+0x54>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task =Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask ;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MYRTOS_STARTOS+0x54>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MYRTOS_STARTOS+0x58>)
 8001500:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8001504:	4810      	ldr	r0, [pc, #64]	; (8001548 <MYRTOS_STARTOS+0x58>)
 8001506:	f7ff ffcd 	bl	80014a4 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 800150a:	f7ff fbb7 	bl	8000c7c <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MYRTOS_STARTOS+0x54>)
 8001510:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4618      	mov	r0, r3
 8001518:	f380 8809 	msr	PSP, r0
	//Switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 800151c:	f3ef 8014 	mrs	r0, CONTROL
 8001520:	f04f 0102 	mov.w	r1, #2
 8001524:	ea40 0001 	orr.w	r0, r0, r1
 8001528:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_to_unprivileged;
 800152c:	f3ef 8314 	mrs	r3, CONTROL
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <MYRTOS_STARTOS+0x58>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4798      	blx	r3
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000050 	.word	0x20000050
 8001548:	20000210 	.word	0x20000210

0800154c <MYRTOS_Update_TasksWaitingTime>:
//				(OS_Control.OSTasks[i]->TimingWaiting) is enabled, decrements the wait ticks count.
//				If the count reaches 1, the task's blocking is disabled and its state is set to Waiting.
//				The function also invokes the MYRTOS_OS_SVC_Set function with the argument SVC_TaskWaitingTime.

void MYRTOS_Update_TasksWaitingTime()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	e031      	b.n	80015bc <MYRTOS_Update_TasksWaitingTime+0x70>
	{
		if (OS_Control.OSTasks[i]->TaskState == Suspend) //it is blocking until meet the time line
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001564:	2b00      	cmp	r3, #0
 8001566:	d126      	bne.n	80015b6 <MYRTOS_Update_TasksWaitingTime+0x6a>
		{
			if (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable)
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d11e      	bne.n	80015b6 <MYRTOS_Update_TasksWaitingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001582:	3a01      	subs	r2, #1
 8001584:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 1)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b01      	cmp	r3, #1
 8001592:	d110      	bne.n	80015b6 <MYRTOS_Update_TasksWaitingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting ;
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7ff ff51 	bl	8001458 <MYRTOS_OS_SVC_Set>
	for (int i =0; i < OS_Control.NoOfActiveTasks ; i++  )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <MYRTOS_Update_TasksWaitingTime+0x84>)
 80015be:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8c7      	bhi.n	8001558 <MYRTOS_Update_TasksWaitingTime+0xc>
				}
			}
		}
	}
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000050 	.word	0x20000050

080015d4 <SysTick_voidStart>:
//time needed = 20

}

void SysTick_voidStart()
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	//enable systick
	SET_BIT(STK_CTRL,_ENABLE);
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_voidStart+0x18>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <SysTick_voidStart+0x18>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <__NVIC_SetPriority>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <HAL_CAN_RxFifo0MsgPendingCallback>:
//Start_CAN
void CAN_Start_Task();


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	flag = 1;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000438 	.word	0x20000438

08001660 <Distance_Task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Distance_Task()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0

	while (1){
		//		Task1LED ^= 1;

		//F_Excution_Start
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	2102      	movs	r1, #2
 8001668:	483d      	ldr	r0, [pc, #244]	; (8001760 <Distance_Task+0x100>)
 800166a:	f001 fdc0 	bl	80031ee <HAL_GPIO_WritePin>
		//		if((ACC_State == ACC_Active)&&(Traffic_Light==Traffic_GREEN))
//		if(ACC_State == ACC_Active)
		{
			Ultrasonic_Read();
 800166e:	f000 faef 	bl	8001c50 <Ultrasonic_Read>
			CURRENT_DISTANCE = Distance;
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <Distance_Task+0x104>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <Distance_Task+0x108>)
 800167a:	801a      	strh	r2, [r3, #0]
//			Data[1]=Distance;

			if(CURRENT_DISTANCE>SAFE_DISTANCE)
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <Distance_Task+0x108>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b3a      	ldr	r3, [pc, #232]	; (800176c <Distance_Task+0x10c>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d916      	bls.n	80016b6 <Distance_Task+0x56>
			{
				EGO_SPEED = EGO_SET_SPEED;
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <Distance_Task+0x110>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa0d 	bl	8000aac <__aeabi_ui2f>
 8001692:	4602      	mov	r2, r0
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <Distance_Task+0x114>)
 8001696:	601a      	str	r2, [r3, #0]
				Data[1]=EGO_SPEED;
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <Distance_Task+0x114>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa5d 	bl	8000b5c <__aeabi_f2uiz>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <Distance_Task+0x118>)
 80016a8:	705a      	strb	r2, [r3, #1]
				//LED_ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	482c      	ldr	r0, [pc, #176]	; (8001760 <Distance_Task+0x100>)
 80016b0:	f001 fd9d 	bl	80031ee <HAL_GPIO_WritePin>
 80016b4:	e049      	b.n	800174a <Distance_Task+0xea>

			}
			else
			{
				// Mapping speed to be 0 to 100
				EGO_SPEED=DistanceToSpeed(&Parmeters,CURRENT_DISTANCE);
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <Distance_Task+0x108>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	482f      	ldr	r0, [pc, #188]	; (800177c <Distance_Task+0x11c>)
 80016be:	f7ff fafd 	bl	8000cbc <DistanceToSpeed>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f9f1 	bl	8000aac <__aeabi_ui2f>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <Distance_Task+0x114>)
 80016ce:	601a      	str	r2, [r3, #0]
				if((CURRENT_DISTANCE>5)&&(CURRENT_DISTANCE<10))
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <Distance_Task+0x108>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d907      	bls.n	80016e8 <Distance_Task+0x88>
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <Distance_Task+0x108>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d803      	bhi.n	80016e8 <Distance_Task+0x88>
				{
					EGO_SPEED = 20;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <Distance_Task+0x114>)
 80016e2:	4a27      	ldr	r2, [pc, #156]	; (8001780 <Distance_Task+0x120>)
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e022      	b.n	800172e <Distance_Task+0xce>
				}
				else if((CURRENT_DISTANCE>10)&&(CURRENT_DISTANCE<15))
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <Distance_Task+0x108>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d907      	bls.n	8001700 <Distance_Task+0xa0>
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <Distance_Task+0x108>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	2b0e      	cmp	r3, #14
 80016f6:	d803      	bhi.n	8001700 <Distance_Task+0xa0>
				{
					EGO_SPEED = 40;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <Distance_Task+0x114>)
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <Distance_Task+0x124>)
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e016      	b.n	800172e <Distance_Task+0xce>
				}
				else if((CURRENT_DISTANCE>15)&&(CURRENT_DISTANCE<20))
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <Distance_Task+0x108>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d907      	bls.n	8001718 <Distance_Task+0xb8>
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <Distance_Task+0x108>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	2b13      	cmp	r3, #19
 800170e:	d803      	bhi.n	8001718 <Distance_Task+0xb8>
				{
					EGO_SPEED = 60;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <Distance_Task+0x114>)
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <Distance_Task+0x128>)
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00a      	b.n	800172e <Distance_Task+0xce>
				}
				else if((CURRENT_DISTANCE>20)&&(CURRENT_DISTANCE<30))
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <Distance_Task+0x108>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b14      	cmp	r3, #20
 800171e:	d906      	bls.n	800172e <Distance_Task+0xce>
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <Distance_Task+0x108>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	2b1d      	cmp	r3, #29
 8001726:	d802      	bhi.n	800172e <Distance_Task+0xce>
				{
					EGO_SPEED = 75;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <Distance_Task+0x114>)
 800172a:	4a18      	ldr	r2, [pc, #96]	; (800178c <Distance_Task+0x12c>)
 800172c:	601a      	str	r2, [r3, #0]
				}
				Data[1]=EGO_SPEED;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <Distance_Task+0x114>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fa12 	bl	8000b5c <__aeabi_f2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <Distance_Task+0x118>)
 800173e:	705a      	strb	r2, [r3, #1]
				//LED_OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2101      	movs	r1, #1
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <Distance_Task+0x100>)
 8001746:	f001 fd52 	bl	80031ee <HAL_GPIO_WritePin>
		{
			//Do nothing

		}
		//F_Excution_End
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4804      	ldr	r0, [pc, #16]	; (8001760 <Distance_Task+0x100>)
 8001750:	f001 fd4d 	bl	80031ee <HAL_GPIO_WritePin>

		MYRTOS_TaskWait(800, &Task1);
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <Distance_Task+0x130>)
 8001756:	f44f 7048 	mov.w	r0, #800	; 0x320
 800175a:	f7ff feb2 	bl	80014c2 <MYRTOS_TaskWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800175e:	e781      	b.n	8001664 <Distance_Task+0x4>
 8001760:	40010800 	.word	0x40010800
 8001764:	20000048 	.word	0x20000048
 8001768:	20000468 	.word	0x20000468
 800176c:	20000002 	.word	0x20000002
 8001770:	20000004 	.word	0x20000004
 8001774:	200004b4 	.word	0x200004b4
 8001778:	20000008 	.word	0x20000008
 800177c:	20000430 	.word	0x20000430
 8001780:	41a00000 	.word	0x41a00000
 8001784:	42200000 	.word	0x42200000
 8001788:	42700000 	.word	0x42700000
 800178c:	42960000 	.word	0x42960000
 8001790:	2000046c 	.word	0x2000046c

08001794 <CAN_TX_Task>:
	}
}
void CAN_TX_Task()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	MYRTOS_TaskWait(100, &Task2);
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <CAN_TX_Task+0x38>)
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f7ff fe91 	bl	80014c2 <MYRTOS_TaskWait>

	while (1){
		//		Task2LED ^= 1;
		//		if((ACC_State == ACC_Active)&&(Traffic_Light==Traffic_GREEN))

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2104      	movs	r1, #4
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <CAN_TX_Task+0x3c>)
 80017a6:	f001 fd22 	bl	80031ee <HAL_GPIO_WritePin>

//		if(ACC_State == ACC_Active)
		{
			//Send CAN Message with speed Value
			CAN_Tx(0x4, 8, Data);
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <CAN_TX_Task+0x40>)
 80017ac:	2108      	movs	r1, #8
 80017ae:	2004      	movs	r0, #4
 80017b0:	f000 fade 	bl	8001d70 <CAN_Tx>
		{
			//Do nothing
		}

		//MYRTOS_TaskWait(1006, &Task2);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2104      	movs	r1, #4
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <CAN_TX_Task+0x3c>)
 80017ba:	f001 fd18 	bl	80031ee <HAL_GPIO_WritePin>

		MYRTOS_TaskWait(500, &Task2);
 80017be:	4903      	ldr	r1, [pc, #12]	; (80017cc <CAN_TX_Task+0x38>)
 80017c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c4:	f7ff fe7d 	bl	80014c2 <MYRTOS_TaskWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80017c8:	e7ea      	b.n	80017a0 <CAN_TX_Task+0xc>
 80017ca:	bf00      	nop
 80017cc:	2000054c 	.word	0x2000054c
 80017d0:	40010800 	.word	0x40010800
 80017d4:	20000008 	.word	0x20000008

080017d8 <CAN_RX_Task>:

	}
}

void CAN_RX_Task()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	while (1){
		//		Task3LED ^= 1;

		//		if(ACC_State == ACC_Active)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2104      	movs	r1, #4
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <CAN_RX_Task+0x68>)
 80017e2:	f001 fd04 	bl	80031ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2101      	movs	r1, #1
 80017ea:	4815      	ldr	r0, [pc, #84]	; (8001840 <CAN_RX_Task+0x68>)
 80017ec:	f001 fcff 	bl	80031ee <HAL_GPIO_WritePin>

			if(flag==1)
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <CAN_RX_Task+0x6c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d117      	bne.n	8001828 <CAN_RX_Task+0x50>
			{
				flag = 0;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <CAN_RX_Task+0x6c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
				CAN_Rx(&RX_ID, &RX_DLC, DataRX,0);
 80017fe:	2300      	movs	r3, #0
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <CAN_RX_Task+0x70>)
 8001802:	4912      	ldr	r1, [pc, #72]	; (800184c <CAN_RX_Task+0x74>)
 8001804:	4812      	ldr	r0, [pc, #72]	; (8001850 <CAN_RX_Task+0x78>)
 8001806:	f000 faed 	bl	8001de4 <CAN_Rx>
				if(DataRX[0]==65)
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <CAN_RX_Task+0x70>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b41      	cmp	r3, #65	; 0x41
 8001810:	d105      	bne.n	800181e <CAN_RX_Task+0x46>
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	2101      	movs	r1, #1
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <CAN_RX_Task+0x68>)
 8001818:	f001 fce9 	bl	80031ee <HAL_GPIO_WritePin>
 800181c:	e004      	b.n	8001828 <CAN_RX_Task+0x50>

				}
				//				else (DataRX[0]==66)
				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <CAN_RX_Task+0x68>)
 8001824:	f001 fce3 	bl	80031ee <HAL_GPIO_WritePin>

			//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
			//Receive Traffic light state
			//			CAN_Rx(&RX_ID, &RX_DLC, DataRX,1);
			//			Traffic_Light = DataRX[0];
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	2104      	movs	r1, #4
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <CAN_RX_Task+0x68>)
 800182e:	f001 fcde 	bl	80031ee <HAL_GPIO_WritePin>

		}

		MYRTOS_TaskWait(500, &Task3);
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <CAN_RX_Task+0x7c>)
 8001834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001838:	f7ff fe43 	bl	80014c2 <MYRTOS_TaskWait>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800183c:	e7ce      	b.n	80017dc <CAN_RX_Task+0x4>
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800
 8001844:	20000438 	.word	0x20000438
 8001848:	20000010 	.word	0x20000010
 800184c:	2000042c 	.word	0x2000042c
 8001850:	200004b8 	.word	0x200004b8
 8001854:	200004bc 	.word	0x200004bc

08001858 <CAN_Start_Task>:
	}
}

void CAN_Start_Task()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
//
//		}
		//LED_OFF
		//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);

		ACC_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800185c:	2101      	movs	r1, #1
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <CAN_Start_Task+0x20>)
 8001860:	f001 fcae 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <CAN_Start_Task+0x24>)
 800186a:	701a      	strb	r2, [r3, #0]
		MYRTOS_TaskWait(10, &Task4);
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <CAN_Start_Task+0x28>)
 800186e:	200a      	movs	r0, #10
 8001870:	f7ff fe27 	bl	80014c2 <MYRTOS_TaskWait>
		ACC_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001874:	e7f2      	b.n	800185c <CAN_Start_Task+0x4>
 8001876:	bf00      	nop
 8001878:	40010800 	.word	0x40010800
 800187c:	20000000 	.word	0x20000000
 8001880:	200003e8 	.word	0x200003e8

08001884 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800188a:	f000 fbf7 	bl	800207c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800188e:	f000 f8ad 	bl	80019ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001892:	f000 f979 	bl	8001b88 <MX_GPIO_Init>
	MX_CAN_Init();
 8001896:	f000 f8ef 	bl	8001a78 <MX_CAN_Init>
	MX_TIM1_Init();
 800189a:	f000 f925 	bl	8001ae8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//	CAN_RXFilterInit( 0x2, 0x000);

	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 800189e:	210f      	movs	r1, #15
 80018a0:	f06f 0001 	mvn.w	r0, #1
 80018a4:	f7ff fea4 	bl	80015f0 <__NVIC_SetPriority>
	if (MYRTOS_init() != NoError)
 80018a8:	f7ff fbe2 	bl	8001070 <MYRTOS_init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d000      	beq.n	80018b4 <main+0x30>
		while (1);
 80018b2:	e7fe      	b.n	80018b2 <main+0x2e>

	Task1.Stack_Size = 1024 ;
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <main+0x120>)
 80018b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ba:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry =Distance_Task;
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <main+0x120>)
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <main+0x124>)
 80018c0:	609a      	str	r2, [r3, #8]
	Task1.priority= 1 ;
 80018c2:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <main+0x120>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	711a      	strb	r2, [r3, #4]
	strcpy (Task1.TaskName, "Distance_Task");
 80018c8:	4a38      	ldr	r2, [pc, #224]	; (80019ac <main+0x128>)
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <main+0x12c>)
 80018cc:	4614      	mov	r4, r2
 80018ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d0:	c407      	stmia	r4!, {r0, r1, r2}
 80018d2:	8023      	strh	r3, [r4, #0]

	Task2.Stack_Size = 1024 ;
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <main+0x130>)
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry =CAN_TX_Task;
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <main+0x130>)
 80018de:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <main+0x134>)
 80018e0:	609a      	str	r2, [r3, #8]
	Task2.priority= 1 ;
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <main+0x130>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	711a      	strb	r2, [r3, #4]
	strcpy (Task2.TaskName, "CAN_TX_Task");
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <main+0x138>)
 80018ea:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <main+0x13c>)
 80018ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Task3.Stack_Size = 1024 ;
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <main+0x140>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f8:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry =CAN_RX_Task;
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <main+0x140>)
 80018fc:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <main+0x144>)
 80018fe:	609a      	str	r2, [r3, #8]
	Task3.priority= 1 ;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <main+0x140>)
 8001902:	2201      	movs	r2, #1
 8001904:	711a      	strb	r2, [r3, #4]
	strcpy (Task3.TaskName, "CAN_RX_Task");
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <main+0x148>)
 8001908:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <main+0x14c>)
 800190a:	ca07      	ldmia	r2, {r0, r1, r2}
 800190c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Task4.Stack_Size = 1024 ;
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <main+0x150>)
 8001912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001916:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry =CAN_Start_Task;
 8001918:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <main+0x150>)
 800191a:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <main+0x154>)
 800191c:	609a      	str	r2, [r3, #8]
	Task4.priority= 1 ;
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <main+0x150>)
 8001920:	2201      	movs	r2, #1
 8001922:	711a      	strb	r2, [r3, #4]
	strcpy (Task4.TaskName, "CAN_Start_Task");
 8001924:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <main+0x158>)
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <main+0x15c>)
 8001928:	4614      	mov	r4, r2
 800192a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800192c:	c407      	stmia	r4!, {r0, r1, r2}
 800192e:	8023      	strh	r3, [r4, #0]
 8001930:	3402      	adds	r4, #2
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	7023      	strb	r3, [r4, #0]

	//Mapping Parameter
	Parmeters.copy_u16MaxDistance=20;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <main+0x160>)
 8001938:	2214      	movs	r2, #20
 800193a:	805a      	strh	r2, [r3, #2]
	Parmeters.copy_u16MaxSpeed = 100;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <main+0x160>)
 800193e:	2264      	movs	r2, #100	; 0x64
 8001940:	715a      	strb	r2, [r3, #5]
	Parmeters.copy_u16MinDistance=0;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <main+0x160>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]
	Parmeters.copy_u16MinSpeed=0;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <main+0x160>)
 800194a:	2200      	movs	r2, #0
 800194c:	711a      	strb	r2, [r3, #4]


	error += MYRTOS_CreateTask(&Task1);
 800194e:	4815      	ldr	r0, [pc, #84]	; (80019a4 <main+0x120>)
 8001950:	f7ff fc0c 	bl	800116c <MYRTOS_CreateTask>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4413      	add	r3, r2
 800195c:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 800195e:	4815      	ldr	r0, [pc, #84]	; (80019b4 <main+0x130>)
 8001960:	f7ff fc04 	bl	800116c <MYRTOS_CreateTask>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4413      	add	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]
	// error += MYRTOS_CreateTask(&Task3);
//		error += MYRTOS_CreateTask(&Task4);

	MYRTOS_ActivateTask(&Task1);
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <main+0x120>)
 8001970:	f7ff fd98 	bl	80014a4 <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <main+0x130>)
 8001976:	f7ff fd95 	bl	80014a4 <MYRTOS_ActivateTask>
	// MYRTOS_ActivateTask(&Task3);
//		MYRTOS_ActivateTask(&Task4);

	//Enable IRQs
	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 800197a:	2102      	movs	r1, #2
 800197c:	481a      	ldr	r0, [pc, #104]	; (80019e8 <main+0x164>)
 800197e:	f000 ff75 	bl	800286c <HAL_CAN_ActivateNotification>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <main+0x108>
	{
		Error_Handler();
 8001988:	f000 fa56 	bl	8001e38 <Error_Handler>
	}


	if(HAL_OK!=HAL_CAN_Start(&hcan))
 800198c:	4816      	ldr	r0, [pc, #88]	; (80019e8 <main+0x164>)
 800198e:	f000 fcc0 	bl	8002312 <HAL_CAN_Start>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <main+0x118>
	{
		Error_Handler();
 8001998:	f000 fa4e 	bl	8001e38 <Error_Handler>

	}

	MYRTOS_STARTOS() ;
 800199c:	f7ff fda8 	bl	80014f0 <MYRTOS_STARTOS>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0x11c>
 80019a2:	bf00      	nop
 80019a4:	2000046c 	.word	0x2000046c
 80019a8:	08001661 	.word	0x08001661
 80019ac:	20000488 	.word	0x20000488
 80019b0:	08003fc0 	.word	0x08003fc0
 80019b4:	2000054c 	.word	0x2000054c
 80019b8:	08001795 	.word	0x08001795
 80019bc:	20000568 	.word	0x20000568
 80019c0:	08003fd0 	.word	0x08003fd0
 80019c4:	200004bc 	.word	0x200004bc
 80019c8:	080017d9 	.word	0x080017d9
 80019cc:	200004d8 	.word	0x200004d8
 80019d0:	08003fdc 	.word	0x08003fdc
 80019d4:	200003e8 	.word	0x200003e8
 80019d8:	08001859 	.word	0x08001859
 80019dc:	20000404 	.word	0x20000404
 80019e0:	08003fe8 	.word	0x08003fe8
 80019e4:	20000430 	.word	0x20000430
 80019e8:	20000440 	.word	0x20000440

080019ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b090      	sub	sp, #64	; 0x40
 80019f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	2228      	movs	r2, #40	; 0x28
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fac6 	bl	8003f8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a20:	2302      	movs	r3, #2
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f001 fbf3 	bl	8003220 <HAL_RCC_OscConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8001a40:	f000 f9fa 	bl	8001e38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a44:	230f      	movs	r3, #15
 8001a46:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 fe5e 	bl	8003720 <HAL_RCC_ClockConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001a6a:	f000 f9e5 	bl	8001e38 <Error_Handler>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	3740      	adds	r7, #64	; 0x40
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <MX_CAN_Init+0x6c>)
 8001a80:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001a84:	2208      	movs	r2, #8
 8001a86:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001a98:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a9c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aa4:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_CAN_Init+0x68>)
 8001acc:	f000 fb26 	bl	800211c <HAL_CAN_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_CAN_Init+0x62>
	{
		Error_Handler();
 8001ad6:	f000 f9af 	bl	8001e38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000440 	.word	0x20000440
 8001ae4:	40006400 	.word	0x40006400

08001ae8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <MX_TIM1_Init+0x9c>)
 8001b08:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b0c:	2247      	movs	r2, #71	; 0x47
 8001b0e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b32:	f001 ff5f 	bl	80039f4 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001b3c:	f000 f97c 	bl	8001e38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b4e:	f001 ffeb 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8001b58:	f000 f96e 	bl	8001e38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM1_Init+0x98>)
 8001b6a:	f002 f98d 	bl	8003e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001b74:	f000 f960 	bl	8001e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000500 	.word	0x20000500
 8001b84:	40012c00 	.word	0x40012c00

08001b88 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001ba2:	f043 0320 	orr.w	r3, r3, #32
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_GPIO_Init+0xbc>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f240 2107 	movw	r1, #519	; 0x207
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001bd4:	f001 fb0b 	bl	80031ee <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 8001bd8:	f240 2307 	movw	r3, #519	; 0x207
 8001bdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2302      	movs	r3, #2
 8001be8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4815      	ldr	r0, [pc, #84]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001bf2:	f001 f98b 	bl	8002f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_GPIO_Init+0xc4>)
 8001bfc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001c0e:	f001 f97d 	bl	8002f0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MX_GPIO_Init+0xc0>)
 8001c28:	f001 f970 	bl	8002f0c <HAL_GPIO_Init>

	/* Enable and set EXTI Line3 interrupt */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2009      	movs	r0, #9
 8001c32:	f001 f934 	bl	8002e9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c36:	2009      	movs	r0, #9
 8001c38:	f001 f94d 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	10310000 	.word	0x10310000

08001c50 <Ultrasonic_Read>:

/* USER CODE BEGIN 4 */


void Ultrasonic_Read(void)
{
 8001c50:	b598      	push	{r3, r4, r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

	HAL_TIM_Base_Start(&htim1);
 8001c54:	4840      	ldr	r0, [pc, #256]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001c56:	f001 ff1d 	bl	8003a94 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c60:	483e      	ldr	r0, [pc, #248]	; (8001d5c <Ultrasonic_Read+0x10c>)
 8001c62:	f001 fac4 	bl	80031ee <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6c:	483b      	ldr	r0, [pc, #236]	; (8001d5c <Ultrasonic_Read+0x10c>)
 8001c6e:	f001 fabe 	bl	80031ee <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c72:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001c7a:	bf00      	nop
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b09      	cmp	r3, #9
 8001c84:	d9fa      	bls.n	8001c7c <Ultrasonic_Read+0x2c>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8c:	4833      	ldr	r0, [pc, #204]	; (8001d5c <Ultrasonic_Read+0x10c>)
 8001c8e:	f001 faae 	bl	80031ee <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001c9a:	f000 fa35 	bl	8002108 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <Ultrasonic_Read+0x110>)
 8001ca2:	601a      	str	r2, [r3, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick()); //
 8001ca4:	bf00      	nop
 8001ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001caa:	482c      	ldr	r0, [pc, #176]	; (8001d5c <Ultrasonic_Read+0x10c>)
 8001cac:	f001 fa88 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <Ultrasonic_Read+0x78>
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <Ultrasonic_Read+0x110>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f103 040a 	add.w	r4, r3, #10
 8001cbe:	f000 fa23 	bl	8002108 <HAL_GetTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	429c      	cmp	r4, r3
 8001cc6:	d8ee      	bhi.n	8001ca6 <Ultrasonic_Read+0x56>
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <Ultrasonic_Read+0x114>)
 8001cd0:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001cd2:	f000 fa19 	bl	8002108 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <Ultrasonic_Read+0x110>)
 8001cda:	601a      	str	r2, [r3, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001cdc:	bf00      	nop
 8001cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <Ultrasonic_Read+0x10c>)
 8001ce4:	f001 fa6c 	bl	80031c0 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <Ultrasonic_Read+0xb0>
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <Ultrasonic_Read+0x110>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001cf6:	f000 fa07 	bl	8002108 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	429c      	cmp	r4, r3
 8001cfe:	d8ee      	bhi.n	8001cde <Ultrasonic_Read+0x8e>
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <Ultrasonic_Read+0x108>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <Ultrasonic_Read+0x118>)
 8001d08:	6013      	str	r3, [r2, #0]

	//	Distance = (Value2-Value1)/58;
	Distance = (Value2-Value1)* 0.034/2;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <Ultrasonic_Read+0x118>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <Ultrasonic_Read+0x114>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fb67 	bl	80003e8 <__aeabi_ui2d>
 8001d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8001d50 <Ultrasonic_Read+0x100>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fbdc 	bl	80004dc <__aeabi_dmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d34:	f7fe fcfc 	bl	8000730 <__aeabi_ddiv>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f7fe fdde 	bl	8000900 <__aeabi_d2uiz>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <Ultrasonic_Read+0x11c>)
 8001d48:	601a      	str	r2, [r3, #0]
	//	HAL_Delay(100);
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);

}
 8001d4a:	bf00      	nop
 8001d4c:	bd98      	pop	{r3, r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	b020c49c 	.word	0xb020c49c
 8001d54:	3fa16872 	.word	0x3fa16872
 8001d58:	20000500 	.word	0x20000500
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	2000043c 	.word	0x2000043c
 8001d64:	20000040 	.word	0x20000040
 8001d68:	20000044 	.word	0x20000044
 8001d6c:	20000048 	.word	0x20000048

08001d70 <CAN_Tx>:
/*--------------------------------------------------------
 * 				TX Can Function
 * -------------------------------------------------------*/

void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	72fb      	strb	r3, [r7, #11]
	uint8_t Num_Of_TxMailboxes=0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t pTxMailbox=0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	623b      	str	r3, [r7, #32]
	pHeader.RTR=CAN_RTR_DATA;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
	pHeader.IDE=CAN_ID_STD;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
	pHeader.StdId=ID;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	613b      	str	r3, [r7, #16]

	//	(++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
	//	mailboxes.
	Num_Of_TxMailboxes=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <CAN_Tx+0x70>)
 8001d9a:	f000 fbd8 	bl	800254e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if(Num_Of_TxMailboxes)
 8001da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <CAN_Tx+0x68>
	{
		//	(++) HAL_CAN_AddTxMessage() to request transmission of a new
		//	message.
		if(HAL_OK!=HAL_CAN_AddTxMessage(&hcan,&pHeader,Payload,&pTxMailbox))
 8001dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db0:	f107 0110 	add.w	r1, r7, #16
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <CAN_Tx+0x70>)
 8001db8:	f000 faef 	bl	800239a <HAL_CAN_AddTxMessage>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <CAN_Tx+0x56>
		{
			Error_Handler();
 8001dc2:	f000 f839 	bl	8001e38 <Error_Handler>

		//	(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//	in a Tx mailbox.


		while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));
 8001dc6:	bf00      	nop
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <CAN_Tx+0x70>)
 8001dce:	f000 fbf2 	bl	80025b6 <HAL_CAN_IsTxMessagePending>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f7      	bne.n	8001dc8 <CAN_Tx+0x58>


	}

}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000440 	.word	0x20000440

08001de4 <CAN_Rx>:

/*--------------------------------------------------------
 * 				RX CAN Function
 * -------------------------------------------------------*/
void CAN_Rx(uint16_t *ID, uint8_t *DLC,uint8_t* Payload,uint8_t Polling_Enable)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	70fb      	strb	r3, [r7, #3]
	//    (++) Then get the message using HAL_CAN_GetRxMessage().

	//wait until a message come to FifoRx0
	//	if(Polling_Enable)
	//	{
	while(0==HAL_CAN_GetRxFifoFillLevel(&hcan,CAN_RX_FIFO0));
 8001df2:	bf00      	nop
 8001df4:	2100      	movs	r1, #0
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <CAN_Rx+0x50>)
 8001df8:	f000 fd11 	bl	800281e <HAL_CAN_GetRxFifoFillLevel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f8      	beq.n	8001df4 <CAN_Rx+0x10>

	//	}

	if(	HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&pHeader,Payload)!=HAL_OK)
 8001e02:	f107 0214 	add.w	r2, r7, #20
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2100      	movs	r1, #0
 8001e0a:	480a      	ldr	r0, [pc, #40]	; (8001e34 <CAN_Rx+0x50>)
 8001e0c:	f000 fbf6 	bl	80025fc <HAL_CAN_GetRxMessage>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <CAN_Rx+0x36>
		Error_Handler();
 8001e16:	f000 f80f 	bl	8001e38 <Error_Handler>

	//fill data
	*DLC=pHeader.DLC;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	701a      	strb	r2, [r3, #0]
	*ID=pHeader.StdId;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	801a      	strh	r2, [r3, #0]

}
 8001e2a:	bf00      	nop
 8001e2c:	3730      	adds	r7, #48	; 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000440 	.word	0x20000440

08001e38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <EXTI3_IRQHandler>:
//	ACC_State^=1;
//
//}

void EXTI3_IRQHandler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR3) // Check if EXTI3 interrupt flag is set
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <EXTI3_IRQHandler+0x34>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00c      	beq.n	8001e6e <EXTI3_IRQHandler+0x2a>
	{
		ACC_State ^= 1; // XOR the global variable with 1
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <EXTI3_IRQHandler+0x38>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <EXTI3_IRQHandler+0x38>)
 8001e60:	701a      	strb	r2, [r3, #0]

		// Clear the interrupt flag
		EXTI->PR |= EXTI_PR_PR3;
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <EXTI3_IRQHandler+0x34>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <EXTI3_IRQHandler+0x34>)
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	6153      	str	r3, [r2, #20]
	}
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010400 	.word	0x40010400
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_MspInit+0x5c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_MspInit+0x5c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x5c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_MspInit+0x60>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_MspInit+0x60>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_CAN_MspInit+0xbc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d149      	bne.n	8001f98 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	61d3      	str	r3, [r2, #28]
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_CAN_MspInit+0xc0>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f4a:	f000 ffdf 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <HAL_CAN_MspInit+0xc4>)
 8001f64:	f000 ffd2 	bl	8002f0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2013      	movs	r0, #19
 8001f6e:	f000 ff96 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001f72:	2013      	movs	r0, #19
 8001f74:	f000 ffaf 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2014      	movs	r0, #20
 8001f7e:	f000 ff8e 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001f82:	2014      	movs	r0, #20
 8001f84:	f000 ffa7 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2016      	movs	r0, #22
 8001f8e:	f000 ff86 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001f92:	2016      	movs	r0, #22
 8001f94:	f000 ff9f 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40006400 	.word	0x40006400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800

08001fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_TIM_Base_MspInit+0x34>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_TIM_Base_MspInit+0x38>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_TIM_Base_MspInit+0x38>)
 8001fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_TIM_Base_MspInit+0x38>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001fee:	f000 fc62 	bl	80028b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000440 	.word	0x20000440

08001ffc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002002:	f000 fc58 	bl	80028b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000440 	.word	0x20000440

08002010 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <CAN1_SCE_IRQHandler+0x10>)
 8002016:	f000 fc4e 	bl	80028b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000440 	.word	0x20000440

08002024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002056:	f7ff ffe5 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205a:	f001 ff73 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205e:	f7ff fc11 	bl	8001884 <main>
  bx lr
 8002062:	4770      	bx	lr
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800206c:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 8002070:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002074:	20000598 	.word	0x20000598

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x28>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x28>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fefb 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fef2 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff13 	bl	8002ef2 <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fedb 	bl	8002e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000018 	.word	0x20000018
 8002100:	20000020 	.word	0x20000020
 8002104:	2000001c 	.word	0x2000001c

08002108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <HAL_GetTick+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	20000594 	.word	0x20000594

0800211c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0ed      	b.n	800230a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fed2 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002150:	f7ff ffda 	bl	8002108 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002156:	e012      	b.n	800217e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002158:	f7ff ffd6 	bl	8002108 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d90b      	bls.n	800217e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0c5      	b.n	800230a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0e5      	beq.n	8002158 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0202 	bic.w	r2, r2, #2
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff ffb4 	bl	8002108 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a2:	e012      	b.n	80021ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a4:	f7ff ffb0 	bl	8002108 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b0a      	cmp	r3, #10
 80021b0:	d90b      	bls.n	80021ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2205      	movs	r2, #5
 80021c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e09f      	b.n	800230a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e5      	bne.n	80021a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e1b      	ldrb	r3, [r3, #24]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7e5b      	ldrb	r3, [r3, #25]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e007      	b.n	800222c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7e9b      	ldrb	r3, [r3, #26]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0220 	orr.w	r2, r2, #32
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0220 	bic.w	r2, r2, #32
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7edb      	ldrb	r3, [r3, #27]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0210 	bic.w	r2, r2, #16
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e007      	b.n	8002280 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0210 	orr.w	r2, r2, #16
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f1b      	ldrb	r3, [r3, #28]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d108      	bne.n	800229a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0208 	orr.w	r2, r2, #8
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e007      	b.n	80022aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0208 	bic.w	r2, r2, #8
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7f5b      	ldrb	r3, [r3, #29]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0204 	orr.w	r2, r2, #4
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e007      	b.n	80022d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d12e      	bne.n	8002384 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800233e:	f7ff fee3 	bl	8002108 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002344:	e012      	b.n	800236c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002346:	f7ff fedf 	bl	8002108 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b0a      	cmp	r3, #10
 8002352:	d90b      	bls.n	800236c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2205      	movs	r2, #5
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e012      	b.n	8002392 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e006      	b.n	8002392 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800239a:	b480      	push	{r7}
 800239c:	b089      	sub	sp, #36	; 0x24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023b8:	7ffb      	ldrb	r3, [r7, #31]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_AddTxMessage+0x2c>
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	f040 80b8 	bne.w	8002536 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a0 	beq.w	8002526 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	0e1b      	lsrs	r3, r3, #24
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d907      	bls.n	8002406 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09e      	b.n	8002544 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	6809      	ldr	r1, [r1, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3318      	adds	r3, #24
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	440b      	add	r3, r1
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00f      	b.n	8002454 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800243e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3318      	adds	r3, #24
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3318      	adds	r3, #24
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	3304      	adds	r3, #4
 8002466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	7d1b      	ldrb	r3, [r3, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d111      	bne.n	8002494 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3318      	adds	r3, #24
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6811      	ldr	r1, [r2, #0]
 8002484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3318      	adds	r3, #24
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	440b      	add	r3, r1
 8002490:	3304      	adds	r3, #4
 8002492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3307      	adds	r3, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	061a      	lsls	r2, r3, #24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3306      	adds	r3, #6
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3305      	adds	r3, #5
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	4313      	orrs	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	3204      	adds	r2, #4
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	4610      	mov	r0, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	ea43 0200 	orr.w	r2, r3, r0
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3303      	adds	r3, #3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	061a      	lsls	r2, r3, #24
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3302      	adds	r3, #2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3301      	adds	r3, #1
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4313      	orrs	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	4610      	mov	r0, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	ea43 0200 	orr.w	r2, r3, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3318      	adds	r3, #24
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3318      	adds	r3, #24
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	440b      	add	r3, r1
 8002520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e00e      	b.n	8002544 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e006      	b.n	8002544 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3724      	adds	r7, #36	; 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002560:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d002      	beq.n	800256e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d11d      	bne.n	80025aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <HAL_CAN_IsTxMessagePending+0x22>
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d10b      	bne.n	80025f0 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	401a      	ands	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80025ec:	2301      	movs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002610:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d003      	beq.n	8002620 <HAL_CAN_GetRxMessage+0x24>
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 80f3 	bne.w	8002806 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d116      	bne.n	8002662 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0e7      	b.n	8002814 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0d8      	b.n	8002814 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	331b      	adds	r3, #27
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0204 	and.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10c      	bne.n	800269a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	331b      	adds	r3, #27
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0d5b      	lsrs	r3, r3, #21
 8002690:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e00b      	b.n	80026b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	331b      	adds	r3, #27
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	331b      	adds	r3, #27
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0202 	and.w	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	331b      	adds	r3, #27
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	331b      	adds	r3, #27
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	3304      	adds	r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0a1a      	lsrs	r2, r3, #8
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0c1a      	lsrs	r2, r3, #16
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3302      	adds	r3, #2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0e1a      	lsrs	r2, r3, #24
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3303      	adds	r3, #3
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3304      	adds	r3, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	4413      	add	r3, r2
 8002796:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0a1a      	lsrs	r2, r3, #8
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3305      	adds	r3, #5
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0c1a      	lsrs	r2, r3, #16
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3306      	adds	r3, #6
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e1a      	lsrs	r2, r3, #24
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3307      	adds	r3, #7
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0220 	orr.w	r2, r2, #32
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	e007      	b.n	8002802 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e006      	b.n	8002814 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002832:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d002      	beq.n	8002840 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d10f      	bne.n	8002860 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e005      	b.n	8002860 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002860:	68fb      	ldr	r3, [r7, #12]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d002      	beq.n	800288a <HAL_CAN_ActivateNotification+0x1e>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d109      	bne.n	800289e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6959      	ldr	r1, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e006      	b.n	80028ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d07c      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d023      	beq.n	800294e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f97d 	bl	8002c18 <HAL_CAN_TxMailbox0CompleteCallback>
 800291e:	e016      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e00c      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	e002      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f980 	bl	8002c4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d024      	beq.n	80029a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f95c 	bl	8002c2a <HAL_CAN_TxMailbox1CompleteCallback>
 8002972:	e016      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e00c      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	e002      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f95f 	bl	8002c60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d024      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f93b 	bl	8002c3c <HAL_CAN_TxMailbox2CompleteCallback>
 80029c6:	e016      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e00c      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	e002      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f93e 	bl	8002c72 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2208      	movs	r2, #8
 8002a34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f924 	bl	8002c84 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe fdf5 	bl	8001644 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2208      	movs	r2, #8
 8002a98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f904 	bl	8002ca8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8ec 	bl	8002c96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8ed 	bl	8002cba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8e5 	bl	8002ccc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d075      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06c      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03d      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d038      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b84:	2b30      	cmp	r3, #48	; 0x30
 8002b86:	d017      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x302>
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d804      	bhi.n	8002b96 <HAL_CAN_IRQHandler+0x2e0>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d009      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x2ee>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d00c      	beq.n	8002bae <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b94:	e024      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002b96:	2b50      	cmp	r3, #80	; 0x50
 8002b98:	d018      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x316>
 8002b9a:	2b60      	cmp	r3, #96	; 0x60
 8002b9c:	d01b      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0x320>
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d00f      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002ba2:	e01d      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bac:	e018      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb6:	e013      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f043 0320 	orr.w	r3, r3, #32
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc0:	e00e      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bca:	e009      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd4:	e004      	b.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f867 	bl	8002cde <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <__NVIC_SetPriorityGrouping>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_GetPriorityGrouping>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_EnableIRQ>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4906      	ldr	r1, [pc, #24]	; (8002d88 <__NVIC_EnableIRQ+0x34>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_SetPriority>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db0a      	blt.n	8002db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <__NVIC_SetPriority+0x4c>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	440b      	add	r3, r1
 8002db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002db4:	e00a      	b.n	8002dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <__NVIC_SetPriority+0x50>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	761a      	strb	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <NVIC_EncodePriority>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f1c3 0307 	rsb	r3, r3, #7
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	bf28      	it	cs
 8002dfe:	2304      	movcs	r3, #4
 8002e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d902      	bls.n	8002e10 <NVIC_EncodePriority+0x30>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3b03      	subs	r3, #3
 8002e0e:	e000      	b.n	8002e12 <NVIC_EncodePriority+0x32>
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43d9      	mvns	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	4313      	orrs	r3, r2
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <SysTick_Config>:
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e54:	d301      	bcc.n	8002e5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00f      	b.n	8002e7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <SysTick_Config+0x40>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e62:	210f      	movs	r1, #15
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f7ff ff90 	bl	8002d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <SysTick_Config+0x40>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <SysTick_Config+0x40>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff2d 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff42 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ff90 	bl	8002de0 <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5f 	bl	8002d8c <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff35 	bl	8002d54 <__NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffa2 	bl	8002e44 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1e:	e127      	b.n	8003170 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f20:	2201      	movs	r2, #1
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8116 	bne.w	800316a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d034      	beq.n	8002fb0 <HAL_GPIO_Init+0xa4>
 8002f46:	2b12      	cmp	r3, #18
 8002f48:	d80d      	bhi.n	8002f66 <HAL_GPIO_Init+0x5a>
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x9a>
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d804      	bhi.n	8002f5c <HAL_GPIO_Init+0x50>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d031      	beq.n	8002fba <HAL_GPIO_Init+0xae>
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d01c      	beq.n	8002f94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f5a:	e048      	b.n	8002fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d043      	beq.n	8002fe8 <HAL_GPIO_Init+0xdc>
 8002f60:	2b11      	cmp	r3, #17
 8002f62:	d01b      	beq.n	8002f9c <HAL_GPIO_Init+0x90>
          break;
 8002f64:	e043      	b.n	8002fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f66:	4a89      	ldr	r2, [pc, #548]	; (800318c <HAL_GPIO_Init+0x280>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d026      	beq.n	8002fba <HAL_GPIO_Init+0xae>
 8002f6c:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_GPIO_Init+0x280>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d806      	bhi.n	8002f80 <HAL_GPIO_Init+0x74>
 8002f72:	4a87      	ldr	r2, [pc, #540]	; (8003190 <HAL_GPIO_Init+0x284>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d020      	beq.n	8002fba <HAL_GPIO_Init+0xae>
 8002f78:	4a86      	ldr	r2, [pc, #536]	; (8003194 <HAL_GPIO_Init+0x288>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_GPIO_Init+0xae>
          break;
 8002f7e:	e036      	b.n	8002fee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f80:	4a85      	ldr	r2, [pc, #532]	; (8003198 <HAL_GPIO_Init+0x28c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0xae>
 8002f86:	4a85      	ldr	r2, [pc, #532]	; (800319c <HAL_GPIO_Init+0x290>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d016      	beq.n	8002fba <HAL_GPIO_Init+0xae>
 8002f8c:	4a84      	ldr	r2, [pc, #528]	; (80031a0 <HAL_GPIO_Init+0x294>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0xae>
          break;
 8002f92:	e02c      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e028      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	623b      	str	r3, [r7, #32]
          break;
 8002fa4:	e023      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	3308      	adds	r3, #8
 8002fac:	623b      	str	r3, [r7, #32]
          break;
 8002fae:	e01e      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e019      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e012      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	611a      	str	r2, [r3, #16]
          break;
 8002fda:	e008      	b.n	8002fee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	615a      	str	r2, [r3, #20]
          break;
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d801      	bhi.n	8002ff8 <HAL_GPIO_Init+0xec>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	e001      	b.n	8002ffc <HAL_GPIO_Init+0xf0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d802      	bhi.n	800300a <HAL_GPIO_Init+0xfe>
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	e002      	b.n	8003010 <HAL_GPIO_Init+0x104>
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	3b08      	subs	r3, #8
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	210f      	movs	r1, #15
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	431a      	orrs	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8096 	beq.w	800316a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800303e:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_GPIO_Init+0x298>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_GPIO_Init+0x298>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6193      	str	r3, [r2, #24]
 800304a:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_GPIO_Init+0x298>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003056:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_GPIO_Init+0x29c>)
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4b      	ldr	r2, [pc, #300]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0x19e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <HAL_GPIO_Init+0x2a4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_Init+0x19a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a49      	ldr	r2, [pc, #292]	; (80031b4 <HAL_GPIO_Init+0x2a8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_Init+0x196>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a48      	ldr	r2, [pc, #288]	; (80031b8 <HAL_GPIO_Init+0x2ac>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_Init+0x192>
 800309a:	2303      	movs	r3, #3
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x1a0>
 800309e:	2304      	movs	r3, #4
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_Init+0x1a0>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_Init+0x1a0>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x1a0>
 80030aa:	2300      	movs	r3, #0
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030bc:	493a      	ldr	r1, [pc, #232]	; (80031a8 <HAL_GPIO_Init+0x29c>)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4938      	ldr	r1, [pc, #224]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	4933      	ldr	r1, [pc, #204]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	492e      	ldr	r1, [pc, #184]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
 800310a:	e006      	b.n	800311a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	43db      	mvns	r3, r3
 8003114:	4929      	ldr	r1, [pc, #164]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003116:	4013      	ands	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4924      	ldr	r1, [pc, #144]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	43db      	mvns	r3, r3
 800313c:	491f      	ldr	r1, [pc, #124]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 800313e:	4013      	ands	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	491a      	ldr	r1, [pc, #104]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
 800315a:	e006      	b.n	800316a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	43db      	mvns	r3, r3
 8003164:	4915      	ldr	r1, [pc, #84]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 8003166:	4013      	ands	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	3301      	adds	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	fa22 f303 	lsr.w	r3, r2, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f47f aed0 	bne.w	8002f20 <HAL_GPIO_Init+0x14>
  }
}
 8003180:	bf00      	nop
 8003182:	372c      	adds	r7, #44	; 0x2c
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	10210000 	.word	0x10210000
 8003190:	10110000 	.word	0x10110000
 8003194:	10120000 	.word	0x10120000
 8003198:	10310000 	.word	0x10310000
 800319c:	10320000 	.word	0x10320000
 80031a0:	10220000 	.word	0x10220000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010800 	.word	0x40010800
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e001      	b.n	80031e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]
 80031fa:	4613      	mov	r3, r2
 80031fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031fe:	787b      	ldrb	r3, [r7, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320a:	e003      	b.n	8003214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	041a      	lsls	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e26c      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8087 	beq.w	800334e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003240:	4b92      	ldr	r3, [pc, #584]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
 8003258:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d10b      	bne.n	800327e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	4b89      	ldr	r3, [pc, #548]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06c      	beq.n	800334c <HAL_RCC_OscConfig+0x12c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d168      	bne.n	800334c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e246      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x76>
 8003288:	4b80      	ldr	r3, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7f      	ldr	r2, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x98>
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xbc>
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6f      	ldr	r3, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6e      	ldr	r2, [pc, #440]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xd4>
 80032dc:	4b6b      	ldr	r3, [pc, #428]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a67      	ldr	r2, [pc, #412]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe ff04 	bl	8002108 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7fe ff00 	bl	8002108 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1fa      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xe4>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe fef0 	bl	8002108 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe feec 	bl	8002108 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1e6      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x10c>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
 8003372:	4b46      	ldr	r3, [pc, #280]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1ba      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4939      	ldr	r1, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fea5 	bl	8002108 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fea1 	bl	8002108 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e19b      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4927      	ldr	r1, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_RCC_OscConfig+0x270>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fe84 	bl	8002108 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe fe80 	bl	8002108 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e17a      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03a      	beq.n	80034a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343c:	f7fe fe64 	bl	8002108 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe fe60 	bl	8002108 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e15a      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCC_OscConfig+0x26c>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003462:	2001      	movs	r0, #1
 8003464:	f000 faa8 	bl	80039b8 <RCC_Delay>
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x274>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003470:	f7fe fe4a 	bl	8002108 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00f      	b.n	8003498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe fe46 	bl	8002108 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d908      	bls.n	8003498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e140      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	42420000 	.word	0x42420000
 8003494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e9      	bne.n	8003478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b97      	ldr	r3, [pc, #604]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a93      	ldr	r2, [pc, #588]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034da:	2301      	movs	r3, #1
 80034dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ea:	4b8b      	ldr	r3, [pc, #556]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a8a      	ldr	r2, [pc, #552]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fe07 	bl	8002108 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fe fe03 	bl	8002108 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0fd      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	4b81      	ldr	r3, [pc, #516]	; (8003718 <HAL_RCC_OscConfig+0x4f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x312>
 8003524:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a7a      	ldr	r2, [pc, #488]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e02d      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x334>
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b73      	ldr	r3, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x356>
 800355c:	4b6d      	ldr	r3, [pc, #436]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a6c      	ldr	r2, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a69      	ldr	r2, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x36e>
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a66      	ldr	r2, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b64      	ldr	r3, [pc, #400]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a63      	ldr	r2, [pc, #396]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fe fdb7 	bl	8002108 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe fdb3 	bl	8002108 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0ab      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x37e>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fe fda1 	bl	8002108 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe fd9d 	bl	8002108 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e095      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8081 	beq.w	800370a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d061      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d146      	bne.n	80036aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe fd71 	bl	8002108 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe fd6d 	bl	8002108 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e067      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d108      	bne.n	8003664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	492d      	ldr	r1, [pc, #180]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a19      	ldr	r1, [r3, #32]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	430b      	orrs	r3, r1
 8003676:	4927      	ldr	r1, [pc, #156]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe fd41 	bl	8002108 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe fd3d 	bl	8002108 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e037      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x46a>
 80036a8:	e02f      	b.n	800370a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_RCC_OscConfig+0x4fc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fd2a 	bl	8002108 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fd26 	bl	8002108 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e020      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x498>
 80036d6:	e018      	b.n	800370a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e013      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
 800371c:	42420060 	.word	0x42420060

08003720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d0      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4965      	ldr	r1, [pc, #404]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b8      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800379e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b50      	ldr	r3, [pc, #320]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	494d      	ldr	r1, [pc, #308]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d040      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d115      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e07f      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e073      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4936      	ldr	r1, [pc, #216]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe fc7a 	bl	8002108 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe fc76 	bl	8002108 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e053      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d210      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4922      	ldr	r1, [pc, #136]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e032      	b.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4916      	ldr	r1, [pc, #88]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	490e      	ldr	r1, [pc, #56]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ae:	f000 f821 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4601      	mov	r1, r0
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	fa21 f303 	lsr.w	r3, r1, r3
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fbea 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40022000 	.word	0x40022000
 80038e4:	40021000 	.word	0x40021000
 80038e8:	0800400c 	.word	0x0800400c
 80038ec:	20000018 	.word	0x20000018
 80038f0:	2000001c 	.word	0x2000001c

080038f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b490      	push	{r4, r7}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038fc:	1d3c      	adds	r4, r7, #4
 80038fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	2300      	movs	r3, #0
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b04      	cmp	r3, #4
 800392c:	d002      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x40>
 800392e:	2b08      	cmp	r3, #8
 8003930:	d003      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x46>
 8003932:	e02d      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003934:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003936:	623b      	str	r3, [r7, #32]
      break;
 8003938:	e02d      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	0c9b      	lsrs	r3, r3, #18
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003946:	4413      	add	r3, r2
 8003948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800394c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c5b      	lsrs	r3, r3, #17
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003966:	4413      	add	r3, r2
 8003968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800396c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003972:	fb02 f203 	mul.w	r2, r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e004      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	623b      	str	r3, [r7, #32]
      break;
 800398e:	e002      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003992:	623b      	str	r3, [r7, #32]
      break;
 8003994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003996:	6a3b      	ldr	r3, [r7, #32]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bc90      	pop	{r4, r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	08003ff8 	.word	0x08003ff8
 80039a8:	08004008 	.word	0x08004008
 80039ac:	40021000 	.word	0x40021000
 80039b0:	007a1200 	.word	0x007a1200
 80039b4:	003d0900 	.word	0x003d0900

080039b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <RCC_Delay+0x34>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <RCC_Delay+0x38>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0a5b      	lsrs	r3, r3, #9
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039d4:	bf00      	nop
  }
  while (Delay --);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e5a      	subs	r2, r3, #1
 80039da:	60fa      	str	r2, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f9      	bne.n	80039d4 <RCC_Delay+0x1c>
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000018 	.word	0x20000018
 80039f0:	10624dd3 	.word	0x10624dd3

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e041      	b.n	8003a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fac6 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 f930 	bl	8003c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d001      	beq.n	8003aac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_TIM_Base_Start+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start+0x48>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start+0x48>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_TIM_Base_Start+0x8c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start+0x48>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIM_Base_Start+0x90>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800

08003b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_ConfigClockSource+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e0a6      	b.n	8003c8e <HAL_TIM_ConfigClockSource+0x166>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d067      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0x120>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d80b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x6c>
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d073      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d802      	bhi.n	8003b8a <HAL_TIM_ConfigClockSource+0x62>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d06f      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b88:	e078      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d06c      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
 8003b8e:	2b30      	cmp	r3, #48	; 0x30
 8003b90:	d06a      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b92:	e073      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d00d      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x8c>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d804      	bhi.n	8003ba6 <HAL_TIM_ConfigClockSource+0x7e>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d033      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xe0>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d041      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ba4:	e06a      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d066      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x152>
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d017      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bb2:	e063      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f000 f941 	bl	8003e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e04c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 f92a 	bl	8003e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e039      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f000 f8a1 	bl	8003d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2150      	movs	r1, #80	; 0x50
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f8f8 	bl	8003e16 <TIM_ITRx_SetConfig>
      break;
 8003c26:	e029      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f000 f8bf 	bl	8003db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2160      	movs	r1, #96	; 0x60
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f8e8 	bl	8003e16 <TIM_ITRx_SetConfig>
      break;
 8003c46:	e019      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f000 f881 	bl	8003d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f8d8 	bl	8003e16 <TIM_ITRx_SetConfig>
      break;
 8003c66:	e009      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 f8cf 	bl	8003e16 <TIM_ITRx_SetConfig>
        break;
 8003c78:	e000      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0xbc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x30>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <TIM_Base_SetConfig+0xc0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <TIM_Base_SetConfig+0xbc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0x62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <TIM_Base_SetConfig+0xc0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <TIM_Base_SetConfig+0xb8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d103      	bne.n	8003d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	615a      	str	r2, [r3, #20]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800

08003d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 0201 	bic.w	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 030a 	bic.w	r3, r3, #10
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f023 0210 	bic.w	r2, r3, #16
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f043 0307 	orr.w	r3, r3, #7
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b087      	sub	sp, #28
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	021a      	lsls	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	609a      	str	r2, [r3, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e046      	b.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d009      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	2500      	movs	r5, #0
 8003f48:	4e0c      	ldr	r6, [pc, #48]	; (8003f7c <__libc_init_array+0x38>)
 8003f4a:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4c:	1ba4      	subs	r4, r4, r6
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	42a5      	cmp	r5, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	f000 f822 	bl	8003f9c <_init>
 8003f58:	2500      	movs	r5, #0
 8003f5a:	4e0a      	ldr	r6, [pc, #40]	; (8003f84 <__libc_init_array+0x40>)
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <__libc_init_array+0x44>)
 8003f5e:	1ba4      	subs	r4, r4, r6
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	42a5      	cmp	r5, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6c:	4798      	blx	r3
 8003f6e:	3501      	adds	r5, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f76:	4798      	blx	r3
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	0800401c 	.word	0x0800401c
 8003f80:	0800401c 	.word	0x0800401c
 8003f84:	0800401c 	.word	0x0800401c
 8003f88:	08004020 	.word	0x08004020

08003f8c <memset>:
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4402      	add	r2, r0
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d100      	bne.n	8003f96 <memset+0xa>
 8003f94:	4770      	bx	lr
 8003f96:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9a:	e7f9      	b.n	8003f90 <memset+0x4>

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr
