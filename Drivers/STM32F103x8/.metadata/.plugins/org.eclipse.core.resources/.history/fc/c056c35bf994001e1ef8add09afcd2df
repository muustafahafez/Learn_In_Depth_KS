/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "stm32_f103c6_drivers_GPIO.h"
#include "stm32_f103x6.h"
#include "stm32_f103c6_drivers_EXTI.h"

#include "Schedular.h"
#include "string.h"

Task_ref_t Task1_cfg,Task2_cfg,Task3_cfg;

void Task1()
{
	while(1)
	{

	}

}
void Task2()
{
	while(1)
	{

	}

}
void Task3()
{
	while(1)
	{

	}

}


void 	HW_Init()
{

}




int main()
{

	uint8_t Local_u8ErrorState=0;
	HW_Init();

	if(Eldeep_OSInit()!=RTOS_NoError)
		while(1);


	Task1_cfg.P_Task=Task1;
	Task1_cfg.priority=0;
	Task1_cfg.stack_size =1024;
	//Task1_cfg.Task_state = Task_Suspend;
	strcpy(Task1_cfg.Task_Name,"Task_1");

	Task2_cfg.P_Task=Task2;
	Task2_cfg.priority=0;
	Task2_cfg.stack_size =1024;
	//Task2_cfg.Task_state = Task_Suspend;
	strcpy(Task2_cfg.Task_Name,"Task_2");


	Task3_cfg.P_Task=Task3;
	Task3_cfg.priority=0;
	Task3_cfg.stack_size =1024;
	//Task3_cfg.Task_state = Task_Suspend;
	strcpy(Task3_cfg.Task_Name,"Task_3");


	Local_u8ErrorState += Eldeep_OSCreateTask(&Task1_cfg);
	Local_u8ErrorState += Eldeep_OSCreateTask(&Task2_cfg);
	Local_u8ErrorState += Eldeep_OSCreateTask(&Task3_cfg);

	while(1)
	{

	}

	return 0;
}



