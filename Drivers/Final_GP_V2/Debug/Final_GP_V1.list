
Final_GP_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000259c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026cc  080026cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080026cc  080026cc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026cc  080026cc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080026d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000018  080026ec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080026ec  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099cf  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001796  00000000  00000000  00029a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000149a  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084dd  00000000  00000000  0002dbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086d93  00000000  00000000  000360d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bce6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e78  00000000  00000000  000bcee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002690 	.word	0x08002690

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002690 	.word	0x08002690

0800014c <HAL_IncTick>:




void HAL_IncTick(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	void_schedular();
 8000150:	f000 f84a 	bl	80001e8 <void_schedular>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <RTOS_voidNewTask>:



RTOS_ErrorStatus RTOS_voidNewTask(uint16_t copy_u16Periodicity , uint8_t copy_u8Priorty, void (*Pfunc)(void),uint16_t copy_u16FirstDelay){
 8000158:	b480      	push	{r7}
 800015a:	b085      	sub	sp, #20
 800015c:	af00      	add	r7, sp, #0
 800015e:	60ba      	str	r2, [r7, #8]
 8000160:	461a      	mov	r2, r3
 8000162:	4603      	mov	r3, r0
 8000164:	81fb      	strh	r3, [r7, #14]
 8000166:	460b      	mov	r3, r1
 8000168:	737b      	strb	r3, [r7, #13]
 800016a:	4613      	mov	r3, r2
 800016c:	80fb      	strh	r3, [r7, #6]

	/*check if priority is exist or not*/
	if(System_Tasks[copy_u8Priorty].PFunc==NULL)
 800016e:	7b7a      	ldrb	r2, [r7, #13]
 8000170:	491c      	ldr	r1, [pc, #112]	; (80001e4 <RTOS_voidNewTask+0x8c>)
 8000172:	4613      	mov	r3, r2
 8000174:	005b      	lsls	r3, r3, #1
 8000176:	4413      	add	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	3308      	adds	r3, #8
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d128      	bne.n	80001d6 <RTOS_voidNewTask+0x7e>
	{
		System_Tasks[copy_u8Priorty].periodicity = copy_u16Periodicity;
 8000184:	7b7a      	ldrb	r2, [r7, #13]
 8000186:	4917      	ldr	r1, [pc, #92]	; (80001e4 <RTOS_voidNewTask+0x8c>)
 8000188:	4613      	mov	r3, r2
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	4413      	add	r3, r2
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	440b      	add	r3, r1
 8000192:	89fa      	ldrh	r2, [r7, #14]
 8000194:	801a      	strh	r2, [r3, #0]
		System_Tasks[copy_u8Priorty].PFunc = Pfunc;
 8000196:	7b7a      	ldrb	r2, [r7, #13]
 8000198:	4912      	ldr	r1, [pc, #72]	; (80001e4 <RTOS_voidNewTask+0x8c>)
 800019a:	4613      	mov	r3, r2
 800019c:	005b      	lsls	r3, r3, #1
 800019e:	4413      	add	r3, r2
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	440b      	add	r3, r1
 80001a4:	3308      	adds	r3, #8
 80001a6:	68ba      	ldr	r2, [r7, #8]
 80001a8:	601a      	str	r2, [r3, #0]
		System_Tasks[copy_u8Priorty].FirstDelay = copy_u16FirstDelay;
 80001aa:	7b7a      	ldrb	r2, [r7, #13]
 80001ac:	490d      	ldr	r1, [pc, #52]	; (80001e4 <RTOS_voidNewTask+0x8c>)
 80001ae:	4613      	mov	r3, r2
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	4413      	add	r3, r2
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	440b      	add	r3, r1
 80001b8:	3302      	adds	r3, #2
 80001ba:	88fa      	ldrh	r2, [r7, #6]
 80001bc:	801a      	strh	r2, [r3, #0]
		System_Tasks[copy_u8Priorty].state = RESUME_TASK;
 80001be:	7b7a      	ldrb	r2, [r7, #13]
 80001c0:	4908      	ldr	r1, [pc, #32]	; (80001e4 <RTOS_voidNewTask+0x8c>)
 80001c2:	4613      	mov	r3, r2
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	4413      	add	r3, r2
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	440b      	add	r3, r1
 80001cc:	3304      	adds	r3, #4
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
		return RTOS_NoError;
 80001d2:	2301      	movs	r3, #1
 80001d4:	e000      	b.n	80001d8 <RTOS_voidNewTask+0x80>
	}
	else
	{
		return RTOS_ErrorPririotyExist;
 80001d6:	2300      	movs	r3, #0
	}


}
 80001d8:	4618      	mov	r0, r3
 80001da:	3714      	adds	r7, #20
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000034 	.word	0x20000034

080001e8 <void_schedular>:


/*=======================================================
 * =====================================================*/
static void void_schedular(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0


	uint8_t Local_u8Ittirate = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	/*check which task achieve the desired tick number*/
	for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	71fb      	strb	r3, [r7, #7]
 80001f6:	e056      	b.n	80002a6 <void_schedular+0xbe>
	{
		/*check if task suspended or not*/
		if(System_Tasks[Local_u8Ittirate].state==RESUME_TASK)
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	492e      	ldr	r1, [pc, #184]	; (80002b4 <void_schedular+0xcc>)
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	3304      	adds	r3, #4
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d148      	bne.n	80002a0 <void_schedular+0xb8>
		{

			if(System_Tasks[Local_u8Ittirate].FirstDelay==0)
 800020e:	79fa      	ldrb	r2, [r7, #7]
 8000210:	4928      	ldr	r1, [pc, #160]	; (80002b4 <void_schedular+0xcc>)
 8000212:	4613      	mov	r3, r2
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	4413      	add	r3, r2
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	3302      	adds	r3, #2
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d129      	bne.n	8000278 <void_schedular+0x90>
			{
				if(System_Tasks[Local_u8Ittirate].PFunc!=NULL)
 8000224:	79fa      	ldrb	r2, [r7, #7]
 8000226:	4923      	ldr	r1, [pc, #140]	; (80002b4 <void_schedular+0xcc>)
 8000228:	4613      	mov	r3, r2
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	4413      	add	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	440b      	add	r3, r1
 8000232:	3308      	adds	r3, #8
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d032      	beq.n	80002a0 <void_schedular+0xb8>
				{
					System_Tasks[Local_u8Ittirate].FirstDelay = System_Tasks[Local_u8Ittirate].periodicity-1;
 800023a:	79fa      	ldrb	r2, [r7, #7]
 800023c:	491d      	ldr	r1, [pc, #116]	; (80002b4 <void_schedular+0xcc>)
 800023e:	4613      	mov	r3, r2
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	4413      	add	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	440b      	add	r3, r1
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	3b01      	subs	r3, #1
 800024e:	b298      	uxth	r0, r3
 8000250:	4918      	ldr	r1, [pc, #96]	; (80002b4 <void_schedular+0xcc>)
 8000252:	4613      	mov	r3, r2
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	440b      	add	r3, r1
 800025c:	3302      	adds	r3, #2
 800025e:	4602      	mov	r2, r0
 8000260:	801a      	strh	r2, [r3, #0]

					System_Tasks[Local_u8Ittirate].PFunc();
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	4913      	ldr	r1, [pc, #76]	; (80002b4 <void_schedular+0xcc>)
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	3308      	adds	r3, #8
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4798      	blx	r3
 8000276:	e013      	b.n	80002a0 <void_schedular+0xb8>
				}

			}
			else
			{
				System_Tasks[Local_u8Ittirate].FirstDelay--;
 8000278:	79fa      	ldrb	r2, [r7, #7]
 800027a:	490e      	ldr	r1, [pc, #56]	; (80002b4 <void_schedular+0xcc>)
 800027c:	4613      	mov	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	4413      	add	r3, r2
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	440b      	add	r3, r1
 8000286:	3302      	adds	r3, #2
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	3b01      	subs	r3, #1
 800028c:	b298      	uxth	r0, r3
 800028e:	4909      	ldr	r1, [pc, #36]	; (80002b4 <void_schedular+0xcc>)
 8000290:	4613      	mov	r3, r2
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	4413      	add	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	3302      	adds	r3, #2
 800029c:	4602      	mov	r2, r0
 800029e:	801a      	strh	r2, [r3, #0]
	for(Local_u8Ittirate =0 ; Local_u8Ittirate <TASKNUM ; Local_u8Ittirate++)
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	3301      	adds	r3, #1
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d9a5      	bls.n	80001f8 <void_schedular+0x10>
		{
			/*Do nothing*/
		}
	}

}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000034 	.word	0x20000034

080002b8 <SysTick_voidInit>:




void SysTick_voidInit()
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	//set pre-scaler: CLR for AHB/8 or SET for Processor clock (AHB)
	SET_BIT(STK_CTRL,CLKSOURCE); // CLC = 1MHZ, Tick = 1 microsecond
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <SysTick_voidInit+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SysTick_voidInit+0x2c>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6013      	str	r3, [r2, #0]
	//Enable SysTick Exception
	SET_BIT(STK_CTRL,TICKINT);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <SysTick_voidInit+0x2c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <SysTick_voidInit+0x2c>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	6013      	str	r3, [r2, #0]
	//set preload value
//	STK_LOAD=72000; //1ms
	STK_LOAD=1440000-1; //20ms
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <SysTick_voidInit+0x30>)
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <SysTick_voidInit+0x34>)
 80002d8:	601a      	str	r2, [r3, #0]

//tick time  = 1 / 72000 micro
//time needed = 20

}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e010 	.word	0xe000e010
 80002e8:	e000e014 	.word	0xe000e014
 80002ec:	0015f8ff 	.word	0x0015f8ff

080002f0 <SysTick_voidStart>:

void SysTick_voidStart()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	//enable systick
	SET_BIT(STK_CTRL,_ENABLE);
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <SysTick_voidStart+0x18>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <SysTick_voidStart+0x18>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	e000e010 	.word	0xe000e010

0800030c <main>:




int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000310:	f000 fb1c 	bl	800094c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000314:	f000 f830 	bl	8000378 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000318:	f000 f8fc 	bl	8000514 <MX_GPIO_Init>
	MX_CAN_Init();
 800031c:	f000 f872 	bl	8000404 <MX_CAN_Init>
	CAN_RXFilterInit( 0x3, 0x000);
 8000320:	2100      	movs	r1, #0
 8000322:	2003      	movs	r0, #3
 8000324:	f000 f9a0 	bl	8000668 <CAN_RXFilterInit>
	MX_TIM1_Init();
 8000328:	f000 f8a4 	bl	8000474 <MX_TIM1_Init>
	SysTick_voidInit();
 800032c:	f7ff ffc4 	bl	80002b8 <SysTick_voidInit>

	//Mapping Parameter
	Parmeters.copy_u16MaxDistance=20;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <main+0x60>)
 8000332:	2214      	movs	r2, #20
 8000334:	805a      	strh	r2, [r3, #2]
	Parmeters.copy_u16MaxSpeed = 100;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <main+0x60>)
 8000338:	2264      	movs	r2, #100	; 0x64
 800033a:	715a      	strb	r2, [r3, #5]
	Parmeters.copy_u16MinDistance=0;
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <main+0x60>)
 800033e:	2200      	movs	r2, #0
 8000340:	801a      	strh	r2, [r3, #0]
	Parmeters.copy_u16MinSpeed=0;
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <main+0x60>)
 8000344:	2200      	movs	r2, #0
 8000346:	711a      	strb	r2, [r3, #4]
	//		Error_Handler();
	//	}
	//Start CAN
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

	if(HAL_OK!=HAL_CAN_Start(&hcan))
 8000348:	4809      	ldr	r0, [pc, #36]	; (8000370 <main+0x64>)
 800034a:	f000 fd13 	bl	8000d74 <HAL_CAN_Start>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <main+0x4c>
	{
		Error_Handler();
 8000354:	f000 f9ce 	bl	80006f4 <Error_Handler>
	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);

//		RTOS_voidNewTask(1, 2, Task1, 0);
	//	RTOS_voidNewTask(1, 0, Distance_Task, 0);
	RTOS_voidNewTask(1, 1, CAN_TX_Task, 0);
 8000358:	2300      	movs	r3, #0
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <main+0x68>)
 800035c:	2101      	movs	r1, #1
 800035e:	2001      	movs	r0, #1
 8000360:	f7ff fefa 	bl	8000158 <RTOS_voidNewTask>
//		RTOS_voidNewTask(1, 1, CAN_RX_Task, 0);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

	SysTick_voidStart();
 8000364:	f7ff ffc4 	bl	80002f0 <SysTick_voidStart>

	while (1)
 8000368:	e7fe      	b.n	8000368 <main+0x5c>
 800036a:	bf00      	nop
 800036c:	2000005c 	.word	0x2000005c
 8000370:	20000068 	.word	0x20000068
 8000374:	080006c5 	.word	0x080006c5

08000378 <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	; 0x40
 800037c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 f97a 	bl	8002680 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039a:	2301      	movs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0318 	add.w	r3, r7, #24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 faf3 	bl	80019ac <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80003cc:	f000 f992 	bl	80006f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2302      	movs	r3, #2
 80003d6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2102      	movs	r1, #2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fd5e 	bl	8001eac <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x82>
	{
		Error_Handler();
 80003f6:	f000 f97d 	bl	80006f4 <Error_Handler>
	}
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_CAN_Init>:


static void MX_CAN_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

	hcan.Instance = CAN1;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_CAN_Init+0x68>)
 800040a:	4a19      	ldr	r2, [pc, #100]	; (8000470 <MX_CAN_Init+0x6c>)
 800040c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 8;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_CAN_Init+0x68>)
 8000410:	2208      	movs	r2, #8
 8000412:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_CAN_Init+0x68>)
 8000416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_CAN_Init+0x68>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_CAN_Init+0x68>)
 8000424:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000428:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_CAN_Init+0x68>)
 800042c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000430:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_CAN_Init+0x68>)
 8000434:	2200      	movs	r2, #0
 8000436:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_CAN_Init+0x68>)
 800043a:	2200      	movs	r2, #0
 800043c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_CAN_Init+0x68>)
 8000440:	2200      	movs	r2, #0
 8000442:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_CAN_Init+0x68>)
 8000446:	2200      	movs	r2, #0
 8000448:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_CAN_Init+0x68>)
 800044c:	2200      	movs	r2, #0
 800044e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_CAN_Init+0x68>)
 8000452:	2200      	movs	r2, #0
 8000454:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_CAN_Init+0x68>)
 8000458:	f000 fac8 	bl	80009ec <HAL_CAN_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_CAN_Init+0x62>
	{
		Error_Handler();
 8000462:	f000 f947 	bl	80006f4 <Error_Handler>
	}

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000068 	.word	0x20000068
 8000470:	40006400 	.word	0x40006400

08000474 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	463b      	mov	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]

	htim1.Instance = TIM1;
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_TIM1_Init+0x98>)
 8000492:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <MX_TIM1_Init+0x9c>)
 8000494:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8000496:	4b1d      	ldr	r3, [pc, #116]	; (800050c <MX_TIM1_Init+0x98>)
 8000498:	2247      	movs	r2, #71	; 0x47
 800049a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_TIM1_Init+0x98>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_TIM1_Init+0x98>)
 80004a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_TIM1_Init+0x98>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_TIM1_Init+0x98>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_TIM1_Init+0x98>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004bc:	4813      	ldr	r0, [pc, #76]	; (800050c <MX_TIM1_Init+0x98>)
 80004be:	f001 fe5f 	bl	8002180 <HAL_TIM_Base_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 80004c8:	f000 f914 	bl	80006f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <MX_TIM1_Init+0x98>)
 80004da:	f001 fea0 	bl	800221e <HAL_TIM_ConfigClockSource>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 80004e4:	f000 f906 	bl	80006f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f0:	463b      	mov	r3, r7
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_TIM1_Init+0x98>)
 80004f6:	f002 f841 	bl	800257c <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000500:	f000 f8f8 	bl	80006f4 <Error_Handler>
	}

}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000009c 	.word	0x2000009c
 8000510:	40012c00 	.word	0x40012c00

08000514 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b2f      	ldr	r3, [pc, #188]	; (80005e8 <MX_GPIO_Init+0xd4>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2e      	ldr	r2, [pc, #184]	; (80005e8 <MX_GPIO_Init+0xd4>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <MX_GPIO_Init+0xd4>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_GPIO_Init+0xd4>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <MX_GPIO_Init+0xd4>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_GPIO_Init+0xd4>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_GPIO_Init+0xd4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xd4>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_GPIO_Init+0xd4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0310 	and.w	r3, r3, #16
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f240 2107 	movw	r1, #519	; 0x207
 8000576:	481d      	ldr	r0, [pc, #116]	; (80005ec <MX_GPIO_Init+0xd8>)
 8000578:	f001 fa00 	bl	800197c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	481b      	ldr	r0, [pc, #108]	; (80005f0 <MX_GPIO_Init+0xdc>)
 8000584:	f001 f9fa 	bl	800197c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 8000588:	f240 2307 	movw	r3, #519	; 0x207
 800058c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2302      	movs	r3, #2
 8000598:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <MX_GPIO_Init+0xd8>)
 80005a2:	f001 f891 	bl	80016c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <MX_GPIO_Init+0xdc>)
 80005c0:	f001 f882 	bl	80016c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xd8>)
 80005da:	f001 f875 	bl	80016c8 <HAL_GPIO_Init>

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40011000 	.word	0x40011000

080005f4 <CAN_Tx>:
/*--------------------------------------------------------
 * 				TX Can Function
 * -------------------------------------------------------*/

void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	460b      	mov	r3, r1
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	72fb      	strb	r3, [r7, #11]
	uint8_t Num_Of_TxMailboxes=0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t pTxMailbox=0;
 8000608:	2300      	movs	r3, #0
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
 800060c:	7afb      	ldrb	r3, [r7, #11]
 800060e:	623b      	str	r3, [r7, #32]
	pHeader.RTR=CAN_RTR_DATA;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
	pHeader.IDE=CAN_ID_STD;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
	pHeader.StdId=ID;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	613b      	str	r3, [r7, #16]

	//	(++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
	//	mailboxes.
	Num_Of_TxMailboxes=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <CAN_Tx+0x70>)
 800061e:	f000 fcc7 	bl	8000fb0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000622:	4603      	mov	r3, r0
 8000624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if(Num_Of_TxMailboxes)
 8000628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800062c:	2b00      	cmp	r3, #0
 800062e:	d015      	beq.n	800065c <CAN_Tx+0x68>
	{
		//	(++) HAL_CAN_AddTxMessage() to request transmission of a new
		//	message.
		if(HAL_OK!=HAL_CAN_AddTxMessage(&hcan,&pHeader,Payload,&pTxMailbox))
 8000630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000634:	f107 0110 	add.w	r1, r7, #16
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <CAN_Tx+0x70>)
 800063c:	f000 fbde 	bl	8000dfc <HAL_CAN_AddTxMessage>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <CAN_Tx+0x56>
		{
			Error_Handler();
 8000646:	f000 f855 	bl	80006f4 <Error_Handler>

		//	(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//	in a Tx mailbox.


			while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));
 800064a:	bf00      	nop
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	4619      	mov	r1, r3
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <CAN_Tx+0x70>)
 8000652:	f000 fce1 	bl	8001018 <HAL_CAN_IsTxMessagePending>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f7      	bne.n	800064c <CAN_Tx+0x58>


	}

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000068 	.word	0x20000068

08000668 <CAN_RXFilterInit>:

/*--------------------------------------------------------
 * 				RX CAN Filter Function
 * -------------------------------------------------------*/
void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	80fb      	strh	r3, [r7, #6]
 8000674:	4613      	mov	r3, r2
 8000676:	80bb      	strh	r3, [r7, #4]
	//	            (++) HAL_CAN_ConfigFilter()

	CAN_FilterTypeDef sFilterConfig;

	//Modes
	sFilterConfig.FilterActivation =CAN_FILTER_ENABLE;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank =0; // Min0 , Max 13
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode =CAN_FILTERMODE_IDMASK;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale =CAN_FILTERSCALE_32BIT;
 8000684:	2301      	movs	r3, #1
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

	//Filter Mask
	sFilterConfig.FilterMaskIdLow =0;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh =(STD_ID_MASK<<5);
 8000690:	88bb      	ldrh	r3, [r7, #4]
 8000692:	015b      	lsls	r3, r3, #5
 8000694:	613b      	str	r3, [r7, #16]
	//Filter ID
	sFilterConfig.FilterIdLow =0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterIdHigh =(STD_ID<<5);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	015b      	lsls	r3, r3, #5
 800069e:	60bb      	str	r3, [r7, #8]


	if(HAL_OK!=HAL_CAN_ConfigFilter(&hcan,&sFilterConfig))
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <CAN_RXFilterInit+0x58>)
 80006a8:	f000 fa9b 	bl	8000be2 <HAL_CAN_ConfigFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <CAN_RXFilterInit+0x4e>
	{
		Error_Handler();
 80006b2:	f000 f81f 	bl	80006f4 <Error_Handler>
	}

}
 80006b6:	bf00      	nop
 80006b8:	3730      	adds	r7, #48	; 0x30
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000068 	.word	0x20000068

080006c4 <CAN_TX_Task>:



//CA TX Task
void CAN_TX_Task()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

//	static uint8_t PinState=1;
//	PinState^=1;
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, PinState);

	if(ACC_State == ACC_Active)
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <CAN_TX_Task+0x28>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10b      	bne.n	80006e8 <CAN_TX_Task+0x24>
	{
		//Send CAN Message with speed Value
				CAN_Tx(0x4, 8, Data);
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <CAN_TX_Task+0x2c>)
 80006d2:	2108      	movs	r1, #8
 80006d4:	2004      	movs	r0, #4
 80006d6:	f7ff ff8d 	bl	80005f4 <CAN_Tx>
				Data[0]^=1;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <CAN_TX_Task+0x2c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <CAN_TX_Task+0x2c>)
 80006e6:	701a      	strb	r2, [r3, #0]
		//		CAN_Tx(0x3ff, 1, 'A');
	}

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000004 	.word	0x20000004

080006f4 <Error_Handler>:
	*DLC =pHeade.DLC;

}

void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	while(1);
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x4>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_MspInit+0x5c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <HAL_MspInit+0x5c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_MspInit+0x60>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_MspInit+0x60>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <HAL_CAN_MspInit+0xbc>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d149      	bne.n	8000814 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000780:	4b27      	ldr	r3, [pc, #156]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 8000786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <HAL_CAN_MspInit+0xc0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <HAL_CAN_MspInit+0xc4>)
 80007c6:	f000 ff7f 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <HAL_CAN_MspInit+0xc4>)
 80007e0:	f000 ff72 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2013      	movs	r0, #19
 80007ea:	f000 ff36 	bl	800165a <HAL_NVIC_SetPriority>
  /* USER CODE END CAN1_MspInit 1 */
 80007ee:	2013      	movs	r0, #19
 80007f0:	f000 ff4f 	bl	8001692 <HAL_NVIC_EnableIRQ>
  }
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2014      	movs	r0, #20
 80007fa:	f000 ff2e 	bl	800165a <HAL_NVIC_SetPriority>

 80007fe:	2014      	movs	r0, #20
 8000800:	f000 ff47 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2016      	movs	r0, #22
 800080a:	f000 ff26 	bl	800165a <HAL_NVIC_SetPriority>

 800080e:	2016      	movs	r0, #22
 8000810:	f000 ff3f 	bl	8001692 <HAL_NVIC_EnableIRQ>
/**
* @brief CAN MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40006400 	.word	0x40006400
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <HAL_TIM_Base_MspInit>:
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x34>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d10b      	bne.n	8000852 <HAL_TIM_Base_MspInit+0x2a>
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_TIM_Base_MspInit+0x38>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_TIM_Base_MspInit+0x38>)
 8000840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_TIM_Base_MspInit+0x38>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <HardFault_Handler+0x4>

08000876 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <BusFault_Handler+0x4>

08000882 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f7ff fc4c 	bl	800014c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <USB_HP_CAN1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80008be:	f000 fbce 	bl	800105e <HAL_CAN_IRQHandler>
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000068 	.word	0x20000068

080008cc <USB_LP_CAN1_RX0_IRQHandler>:
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008d2:	f000 fbc4 	bl	800105e <HAL_CAN_IRQHandler>
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000068 	.word	0x20000068

080008e0 <CAN1_SCE_IRQHandler>:
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <CAN1_SCE_IRQHandler+0x10>)
 80008e6:	f000 fbba 	bl	800105e <HAL_CAN_IRQHandler>
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000068 	.word	0x20000068

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000926:	f7ff ffe5 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f001 fe85 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fced 	bl	800030c <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800093c:	080026d4 	.word	0x080026d4
  ldr r2, =_sbss
 8000940:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000944:	200000e8 	.word	0x200000e8

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 fe71 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fec8 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fe89 	bl	80016ae <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 fe51 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000000c 	.word	0x2000000c
 80009d0:	20000014 	.word	0x20000014
 80009d4:	20000010 	.word	0x20000010

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	200000e4 	.word	0x200000e4

080009ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0ed      	b.n	8000bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fea8 	bl	8000760 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a20:	f7ff ffda 	bl	80009d8 <HAL_GetTick>
 8000a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a26:	e012      	b.n	8000a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a28:	f7ff ffd6 	bl	80009d8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	2b0a      	cmp	r3, #10
 8000a34:	d90b      	bls.n	8000a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2205      	movs	r2, #5
 8000a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e0c5      	b.n	8000bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0e5      	beq.n	8000a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0202 	bic.w	r2, r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a6c:	f7ff ffb4 	bl	80009d8 <HAL_GetTick>
 8000a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a72:	e012      	b.n	8000a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a74:	f7ff ffb0 	bl	80009d8 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b0a      	cmp	r3, #10
 8000a80:	d90b      	bls.n	8000a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2205      	movs	r2, #5
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e09f      	b.n	8000bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e5      	bne.n	8000a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7e1b      	ldrb	r3, [r3, #24]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e5b      	ldrb	r3, [r3, #25]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e9b      	ldrb	r3, [r3, #26]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0220 	orr.w	r2, r2, #32
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0220 	bic.w	r2, r2, #32
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7edb      	ldrb	r3, [r3, #27]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0210 	bic.w	r2, r2, #16
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 0210 	orr.w	r2, r2, #16
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7f1b      	ldrb	r3, [r3, #28]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0208 	orr.w	r2, r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0208 	bic.w	r2, r2, #8
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7f5b      	ldrb	r3, [r3, #29]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0204 	orr.w	r2, r2, #4
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0204 	bic.w	r2, r2, #4
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	ea42 0103 	orr.w	r1, r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bfa:	7cfb      	ldrb	r3, [r7, #19]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d003      	beq.n	8000c08 <HAL_CAN_ConfigFilter+0x26>
 8000c00:	7cfb      	ldrb	r3, [r7, #19]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	f040 80aa 	bne.w	8000d5c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c0e:	f043 0201 	orr.w	r2, r3, #1
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	2201      	movs	r2, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d123      	bne.n	8000c8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3248      	adds	r2, #72	; 0x48
 8000c6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c80:	6979      	ldr	r1, [r7, #20]
 8000c82:	3348      	adds	r3, #72	; 0x48
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	440b      	add	r3, r1
 8000c88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d122      	bne.n	8000cd8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3248      	adds	r2, #72	; 0x48
 8000cb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ccc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cce:	6979      	ldr	r1, [r7, #20]
 8000cd0:	3348      	adds	r3, #72	; 0x48
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000cf2:	e007      	b.n	8000d04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d1e:	e007      	b.n	8000d30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d107      	bne.n	8000d48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d4e:	f023 0201 	bic.w	r2, r3, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e006      	b.n	8000d6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
  }
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d12e      	bne.n	8000de6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000da0:	f7ff fe1a 	bl	80009d8 <HAL_GetTick>
 8000da4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000da6:	e012      	b.n	8000dce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000da8:	f7ff fe16 	bl	80009d8 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d90b      	bls.n	8000dce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2205      	movs	r2, #5
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e012      	b.n	8000df4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e5      	bne.n	8000da8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e006      	b.n	8000df4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
  }
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e1a:	7ffb      	ldrb	r3, [r7, #31]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d003      	beq.n	8000e28 <HAL_CAN_AddTxMessage+0x2c>
 8000e20:	7ffb      	ldrb	r3, [r7, #31]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	f040 80b8 	bne.w	8000f98 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10a      	bne.n	8000e48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d105      	bne.n	8000e48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80a0 	beq.w	8000f88 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	0e1b      	lsrs	r3, r3, #24
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d907      	bls.n	8000e68 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e09e      	b.n	8000fa6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10d      	bne.n	8000e96 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	6809      	ldr	r1, [r1, #0]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3318      	adds	r3, #24
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	440b      	add	r3, r1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e00f      	b.n	8000eb6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea6:	68f9      	ldr	r1, [r7, #12]
 8000ea8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eaa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3318      	adds	r3, #24
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	440b      	add	r3, r1
 8000eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	7d1b      	ldrb	r3, [r3, #20]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d111      	bne.n	8000ef6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3318      	adds	r3, #24
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4413      	add	r3, r2
 8000ede:	3304      	adds	r3, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	6811      	ldr	r1, [r2, #0]
 8000ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3318      	adds	r3, #24
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	061a      	lsls	r2, r3, #24
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3306      	adds	r3, #6
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3305      	adds	r3, #5
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	4313      	orrs	r3, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	3204      	adds	r2, #4
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	4610      	mov	r0, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	6811      	ldr	r1, [r2, #0]
 8000f1e:	ea43 0200 	orr.w	r2, r3, r0
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	440b      	add	r3, r1
 8000f28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3303      	adds	r3, #3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	061a      	lsls	r2, r3, #24
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	4610      	mov	r0, r2
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	ea43 0200 	orr.w	r2, r3, r0
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	6811      	ldr	r1, [r2, #0]
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	440b      	add	r3, r1
 8000f82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e00e      	b.n	8000fa6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e006      	b.n	8000fa6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
  }
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d002      	beq.n	8000fd0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d11d      	bne.n	800100c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d002      	beq.n	800103a <HAL_CAN_IsTxMessagePending+0x22>
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d10b      	bne.n	8001052 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	069b      	lsls	r3, r3, #26
 8001044:	401a      	ands	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	069b      	lsls	r3, r3, #26
 800104a:	429a      	cmp	r2, r3
 800104c:	d001      	beq.n	8001052 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800104e:	2301      	movs	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b08a      	sub	sp, #40	; 0x28
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d07c      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d023      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2201      	movs	r2, #1
 80010b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f97d 	bl	80013c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80010c6:	e016      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
 80010da:	e00c      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	e002      	b.n	80010f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f980 	bl	80013f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d024      	beq.n	800114a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f95c 	bl	80013d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800111a:	e016      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e00c      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	e002      	b.n	800114a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f95f 	bl	8001408 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d024      	beq.n	800119e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f93b 	bl	80013e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800116e:	e016      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	e00c      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
 8001196:	e002      	b.n	800119e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f93e 	bl	800141a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2210      	movs	r2, #16
 80011c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f92d 	bl	800143e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f915 	bl	800142c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2210      	movs	r2, #16
 8001224:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2208      	movs	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f90d 	bl	8001462 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f8f5 	bl	8001450 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2210      	movs	r2, #16
 8001280:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f8f6 	bl	8001474 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f8ee 	bl	8001486 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d075      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001318:	2b00      	cmp	r3, #0
 800131a:	d03d      	beq.n	8001398 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d038      	beq.n	8001398 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800132c:	2b30      	cmp	r3, #48	; 0x30
 800132e:	d017      	beq.n	8001360 <HAL_CAN_IRQHandler+0x302>
 8001330:	2b30      	cmp	r3, #48	; 0x30
 8001332:	d804      	bhi.n	800133e <HAL_CAN_IRQHandler+0x2e0>
 8001334:	2b10      	cmp	r3, #16
 8001336:	d009      	beq.n	800134c <HAL_CAN_IRQHandler+0x2ee>
 8001338:	2b20      	cmp	r3, #32
 800133a:	d00c      	beq.n	8001356 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800133c:	e024      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800133e:	2b50      	cmp	r3, #80	; 0x50
 8001340:	d018      	beq.n	8001374 <HAL_CAN_IRQHandler+0x316>
 8001342:	2b60      	cmp	r3, #96	; 0x60
 8001344:	d01b      	beq.n	800137e <HAL_CAN_IRQHandler+0x320>
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d00f      	beq.n	800136a <HAL_CAN_IRQHandler+0x30c>
            break;
 800134a:	e01d      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001354:	e018      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800135e:	e013      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001368:	e00e      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001372:	e009      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800137c:	e004      	b.n	8001388 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001386:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001396:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2204      	movs	r2, #4
 800139e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f870 	bl	8001498 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
	...

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <__NVIC_EnableIRQ+0x34>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff90 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff2d 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff42 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff90 	bl	800159c <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff35 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	e127      	b.n	800192c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016dc:	2201      	movs	r2, #1
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8116 	bne.w	8001926 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b12      	cmp	r3, #18
 8001700:	d034      	beq.n	800176c <HAL_GPIO_Init+0xa4>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d80d      	bhi.n	8001722 <HAL_GPIO_Init+0x5a>
 8001706:	2b02      	cmp	r3, #2
 8001708:	d02b      	beq.n	8001762 <HAL_GPIO_Init+0x9a>
 800170a:	2b02      	cmp	r3, #2
 800170c:	d804      	bhi.n	8001718 <HAL_GPIO_Init+0x50>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d031      	beq.n	8001776 <HAL_GPIO_Init+0xae>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d01c      	beq.n	8001750 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001716:	e048      	b.n	80017aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001718:	2b03      	cmp	r3, #3
 800171a:	d043      	beq.n	80017a4 <HAL_GPIO_Init+0xdc>
 800171c:	2b11      	cmp	r3, #17
 800171e:	d01b      	beq.n	8001758 <HAL_GPIO_Init+0x90>
          break;
 8001720:	e043      	b.n	80017aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001722:	4a89      	ldr	r2, [pc, #548]	; (8001948 <HAL_GPIO_Init+0x280>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d026      	beq.n	8001776 <HAL_GPIO_Init+0xae>
 8001728:	4a87      	ldr	r2, [pc, #540]	; (8001948 <HAL_GPIO_Init+0x280>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d806      	bhi.n	800173c <HAL_GPIO_Init+0x74>
 800172e:	4a87      	ldr	r2, [pc, #540]	; (800194c <HAL_GPIO_Init+0x284>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d020      	beq.n	8001776 <HAL_GPIO_Init+0xae>
 8001734:	4a86      	ldr	r2, [pc, #536]	; (8001950 <HAL_GPIO_Init+0x288>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01d      	beq.n	8001776 <HAL_GPIO_Init+0xae>
          break;
 800173a:	e036      	b.n	80017aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800173c:	4a85      	ldr	r2, [pc, #532]	; (8001954 <HAL_GPIO_Init+0x28c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0xae>
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <HAL_GPIO_Init+0x290>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d016      	beq.n	8001776 <HAL_GPIO_Init+0xae>
 8001748:	4a84      	ldr	r2, [pc, #528]	; (800195c <HAL_GPIO_Init+0x294>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xae>
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e028      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e023      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01e      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e019      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e012      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e008      	b.n	80017aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2bff      	cmp	r3, #255	; 0xff
 80017ae:	d801      	bhi.n	80017b4 <HAL_GPIO_Init+0xec>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	e001      	b.n	80017b8 <HAL_GPIO_Init+0xf0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d802      	bhi.n	80017c6 <HAL_GPIO_Init+0xfe>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x104>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3b08      	subs	r3, #8
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	210f      	movs	r1, #15
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	6a39      	ldr	r1, [r7, #32]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8096 	beq.w	8001926 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_GPIO_Init+0x298>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_GPIO_Init+0x298>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <HAL_GPIO_Init+0x298>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001812:	4a54      	ldr	r2, [pc, #336]	; (8001964 <HAL_GPIO_Init+0x29c>)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_GPIO_Init+0x2a0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x19e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4a      	ldr	r2, [pc, #296]	; (800196c <HAL_GPIO_Init+0x2a4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x19a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a49      	ldr	r2, [pc, #292]	; (8001970 <HAL_GPIO_Init+0x2a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x196>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <HAL_GPIO_Init+0x2ac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x192>
 8001856:	2303      	movs	r3, #3
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x1a0>
 800185a:	2304      	movs	r3, #4
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x1a0>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x1a0>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x1a0>
 8001866:	2300      	movs	r3, #0
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001878:	493a      	ldr	r1, [pc, #232]	; (8001964 <HAL_GPIO_Init+0x29c>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4938      	ldr	r1, [pc, #224]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4933      	ldr	r1, [pc, #204]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	492e      	ldr	r1, [pc, #184]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4929      	ldr	r1, [pc, #164]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	4924      	ldr	r1, [pc, #144]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
 80018ee:	e006      	b.n	80018fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	491f      	ldr	r1, [pc, #124]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	491a      	ldr	r1, [pc, #104]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	60cb      	str	r3, [r1, #12]
 8001916:	e006      	b.n	8001926 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	43db      	mvns	r3, r3
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <HAL_GPIO_Init+0x2b0>)
 8001922:	4013      	ands	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	3301      	adds	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	f47f aed0 	bne.w	80016dc <HAL_GPIO_Init+0x14>
  }
}
 800193c:	bf00      	nop
 800193e:	372c      	adds	r7, #44	; 0x2c
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	10210000 	.word	0x10210000
 800194c:	10110000 	.word	0x10110000
 8001950:	10120000 	.word	0x10120000
 8001954:	10310000 	.word	0x10310000
 8001958:	10320000 	.word	0x10320000
 800195c:	10220000 	.word	0x10220000
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00
 8001970:	40011000 	.word	0x40011000
 8001974:	40011400 	.word	0x40011400
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e26c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d112      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d168      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e246      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76>
 8001a14:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbc>
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe ffa6 	bl	80009d8 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7fe ffa2 	bl	80009d8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1fa      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe ff92 	bl	80009d8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7fe ff8e 	bl	80009d8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1e6      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x10c>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d063      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1ba      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4939      	ldr	r1, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	e03a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe ff47 	bl	80009d8 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7fe ff43 	bl	80009d8 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e19b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe ff26 	bl	80009d8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7fe ff22 	bl	80009d8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e17a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03a      	beq.n	8001c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe ff06 	bl	80009d8 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe ff02 	bl	80009d8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e15a      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 faa8 	bl	8002144 <RCC_Delay>
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe feec 	bl	80009d8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe fee8 	bl	80009d8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d908      	bls.n	8001c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e140      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e9      	bne.n	8001c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a6 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b97      	ldr	r3, [pc, #604]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b94      	ldr	r3, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a93      	ldr	r2, [pc, #588]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a8a      	ldr	r2, [pc, #552]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fea9 	bl	80009d8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7fe fea5 	bl	80009d8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0fd      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_RCC_OscConfig+0x4f8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x312>
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x356>
 8001ce8:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b6a      	ldr	r3, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a69      	ldr	r2, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001d02:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fe59 	bl	80009d8 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fe55 	bl	80009d8 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0ab      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x37e>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fe43 	bl	80009d8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe fe3f 	bl	80009d8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e095      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a47      	ldr	r2, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8081 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d061      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d146      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe fe13 	bl	80009d8 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe fe0f 	bl	80009d8 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e067      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dde:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	492d      	ldr	r1, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a19      	ldr	r1, [r3, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	430b      	orrs	r3, r1
 8001e02:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fde3 	bl	80009d8 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe fddf 	bl	80009d8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e037      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46a>
 8001e34:	e02f      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_RCC_OscConfig+0x4fc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fdcc 	bl	80009d8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fdc8 	bl	80009d8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e020      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x498>
 8001e62:	e018      	b.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	42420060 	.word	0x42420060

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fd1c 	bl	80009d8 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fd18 	bl	80009d8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	fa21 f303 	lsr.w	r3, r1, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fc8c 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	080026bc 	.word	0x080026bc
 8002078:	2000000c 	.word	0x2000000c
 800207c:	20000010 	.word	0x20000010

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b490      	push	{r4, r7}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002088:	1d3c      	adds	r4, r7, #4
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	e02d      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d2:	4413      	add	r3, r2
 80020d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c5b      	lsrs	r3, r3, #17
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f2:	4413      	add	r3, r2
 80020f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fe:	fb02 f203 	mul.w	r2, r2, r3
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	623b      	str	r3, [r7, #32]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_GetSysClockFreq+0xbc>)
 800211e:	623b      	str	r3, [r7, #32]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	6a3b      	ldr	r3, [r7, #32]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc90      	pop	{r4, r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	080026a8 	.word	0x080026a8
 8002134:	080026b8 	.word	0x080026b8
 8002138:	40021000 	.word	0x40021000
 800213c:	007a1200 	.word	0x007a1200
 8002140:	003d0900 	.word	0x003d0900

08002144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <RCC_Delay+0x34>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <RCC_Delay+0x38>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002160:	bf00      	nop
  }
  while (Delay --);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <RCC_Delay+0x1c>
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fb3e 	bl	8000828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 f8e4 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_TIM_ConfigClockSource+0x18>
 8002232:	2302      	movs	r3, #2
 8002234:	e0a6      	b.n	8002384 <HAL_TIM_ConfigClockSource+0x166>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002254:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d067      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x120>
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d80b      	bhi.n	800228a <HAL_TIM_ConfigClockSource+0x6c>
 8002272:	2b10      	cmp	r3, #16
 8002274:	d073      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
 8002276:	2b10      	cmp	r3, #16
 8002278:	d802      	bhi.n	8002280 <HAL_TIM_ConfigClockSource+0x62>
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06f      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800227e:	e078      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002280:	2b20      	cmp	r3, #32
 8002282:	d06c      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
 8002284:	2b30      	cmp	r3, #48	; 0x30
 8002286:	d06a      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002288:	e073      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800228a:	2b70      	cmp	r3, #112	; 0x70
 800228c:	d00d      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x8c>
 800228e:	2b70      	cmp	r3, #112	; 0x70
 8002290:	d804      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x7e>
 8002292:	2b50      	cmp	r3, #80	; 0x50
 8002294:	d033      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xe0>
 8002296:	2b60      	cmp	r3, #96	; 0x60
 8002298:	d041      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800229a:	e06a      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d066      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0x152>
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a6:	d017      	beq.n	80022d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80022a8:	e063      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f000 f940 	bl	800253e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
      break;
 80022d6:	e04c      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f000 f929 	bl	800253e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fa:	609a      	str	r2, [r3, #8]
      break;
 80022fc:	e039      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f000 f8a0 	bl	8002450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2150      	movs	r1, #80	; 0x50
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f8f7 	bl	800250a <TIM_ITRx_SetConfig>
      break;
 800231c:	e029      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	461a      	mov	r2, r3
 800232c:	f000 f8be 	bl	80024ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2160      	movs	r1, #96	; 0x60
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f8e7 	bl	800250a <TIM_ITRx_SetConfig>
      break;
 800233c:	e019      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	461a      	mov	r2, r3
 800234c:	f000 f880 	bl	8002450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f8d7 	bl	800250a <TIM_ITRx_SetConfig>
      break;
 800235c:	e009      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f000 f8ce 	bl	800250a <TIM_ITRx_SetConfig>
        break;
 800236e:	e000      	b.n	8002372 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002370:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <TIM_Base_SetConfig+0xb8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00b      	beq.n	80023bc <TIM_Base_SetConfig+0x30>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d007      	beq.n	80023bc <TIM_Base_SetConfig+0x30>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a26      	ldr	r2, [pc, #152]	; (8002448 <TIM_Base_SetConfig+0xbc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <TIM_Base_SetConfig+0x30>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <TIM_Base_SetConfig+0xc0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d108      	bne.n	80023ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <TIM_Base_SetConfig+0xb8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_Base_SetConfig+0x62>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d007      	beq.n	80023ee <TIM_Base_SetConfig+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a19      	ldr	r2, [pc, #100]	; (8002448 <TIM_Base_SetConfig+0xbc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_Base_SetConfig+0x62>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <TIM_Base_SetConfig+0xc0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d108      	bne.n	8002400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <TIM_Base_SetConfig+0xb8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d103      	bne.n	8002434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	615a      	str	r2, [r3, #20]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800

08002450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	f023 0201 	bic.w	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 030a 	bic.w	r3, r3, #10
 800248c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f023 0210 	bic.w	r2, r3, #16
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	031b      	lsls	r3, r3, #12
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	621a      	str	r2, [r3, #32]
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	f043 0307 	orr.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	431a      	orrs	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4313      	orrs	r3, r2
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002590:	2302      	movs	r3, #2
 8002592:	e046      	b.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d009      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a10      	ldr	r2, [pc, #64]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10c      	bne.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4313      	orrs	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40012c00 	.word	0x40012c00
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	2500      	movs	r5, #0
 800263c:	4e0c      	ldr	r6, [pc, #48]	; (8002670 <__libc_init_array+0x38>)
 800263e:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 8002640:	1ba4      	subs	r4, r4, r6
 8002642:	10a4      	asrs	r4, r4, #2
 8002644:	42a5      	cmp	r5, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	f000 f822 	bl	8002690 <_init>
 800264c:	2500      	movs	r5, #0
 800264e:	4e0a      	ldr	r6, [pc, #40]	; (8002678 <__libc_init_array+0x40>)
 8002650:	4c0a      	ldr	r4, [pc, #40]	; (800267c <__libc_init_array+0x44>)
 8002652:	1ba4      	subs	r4, r4, r6
 8002654:	10a4      	asrs	r4, r4, #2
 8002656:	42a5      	cmp	r5, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002660:	4798      	blx	r3
 8002662:	3501      	adds	r5, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266a:	4798      	blx	r3
 800266c:	3501      	adds	r5, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	080026cc 	.word	0x080026cc
 8002674:	080026cc 	.word	0x080026cc
 8002678:	080026cc 	.word	0x080026cc
 800267c:	080026d0 	.word	0x080026d0

08002680 <memset>:
 8002680:	4603      	mov	r3, r0
 8002682:	4402      	add	r2, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
