/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"


CAN_HandleTypeDef hcan;


/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);



void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK)
{

//	 (#) Configure the reception filters using the following configuration
//	          functions:
//	            (++) HAL_CAN_ConfigFilter()

	CAN_FilterTypeDef sFilterConfig;

	//Modes
	sFilterConfig.FilterActivation =CAN_FILTER_ENABLE;
	sFilterConfig.FilterBank =0; // Min0 , Max 13
	sFilterConfig.FilterMode =CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale =CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;

	//Filter Mask
	sFilterConfig.FilterMaskIdLow =0;
	sFilterConfig.FilterMaskIdHigh =(STD_ID_MASK<<5);
	//Filter ID
	sFilterConfig.FilterIdLow =0;
	sFilterConfig.FilterIdHigh =(STD_ID<<5);


	if(HAL_OK!=HAL_CAN_ConfigFilter(&hcan,&sFilterConfig))
	{
		Error_Handler();
	}

}


void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload)
{
	uint8_t Num_Of_TxMailboxes=0;
	uint32_t pTxMailbox=0;
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
	pHeader.RTR=CAN_RTR_DATA;
	pHeader.IDE=CAN_ID_STD;
	pHeader.StdId=ID;

	//	(++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
	//	mailboxes.
	Num_Of_TxMailboxes=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);


	if(Num_Of_TxMailboxes)
	{
		//	(++) HAL_CAN_AddTxMessage() to request transmission of a new
		//	message.
		if(HAL_OK!=HAL_CAN_AddTxMessage(&hcan,&pHeader,Payload,&pTxMailbox))
		{
			Error_Handler();
		}

		//	(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//	in a Tx mailbox.

		while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));
	}

}



void CAN_Rx(uint16_t *ID, uint8_t *DLC,uint8_t* Payload)
{

	CAN_RxHeaderTypeDef pHeader;


	//    (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
	//         until at least one message is received.
	//    (++) Then get the message using HAL_CAN_GetRxMessage().

	//wait until a message come to FifoRx0
	while(0==HAL_CAN_GetRxFifoFillLevel(&hcan,CAN_RX_FIFO0));

	if(	HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&pHeader,Payload)!=HAL_OK)
		Error_Handler();

	//fill data
	*DLC=pHeader.DLC;
	*ID=pHeader.StdId;

}

int main(void)
{

	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_CAN_Init();


	CAN_RXFilterInit( 0x3ff, 0x7FF);

	uint8_t Fram_no =0;
	unsigned char DataTx[8]={'C','A','N',' ','N','o',':',' '};
	unsigned char DataRX[8]={0};
	uint16_t RX_ID;
	uint8_t RX_DLC;

	if(HAL_OK!=HAL_CAN_Start(&hcan))
	{
		Error_Handler();

	}


	while (1)
	{
		DataTx[7]=Fram_no++;
		CAN_Tx(0x3ff, 8, DataTx);
//		CAN_Rx(&RX_ID, &RX_DLC, DataRX);

	}

}

void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{

	hcan.Instance = CAN1;
	hcan.Init.Prescaler = 1;
	hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
	hcan.Init.TimeTriggeredMode = DISABLE;
	hcan.Init.AutoBusOff = DISABLE;
	hcan.Init.AutoWakeUp = DISABLE;
	hcan.Init.AutoRetransmission = ENABLE;
	hcan.Init.ReceiveFifoLocked = DISABLE;
	hcan.Init.TransmitFifoPriority = DISABLE;
	if (HAL_CAN_Init(&hcan) != HAL_OK)
	{
		Error_Handler();
	}


}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();

}
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	while(1)
	{

	}
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
