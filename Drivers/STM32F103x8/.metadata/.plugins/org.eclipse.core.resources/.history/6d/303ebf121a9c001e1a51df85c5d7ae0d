/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "Scheduler.h"
#include "DistanceToSpeed.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
CAN_HandleTypeDef hcan;
TIM_HandleTypeDef htim1;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TRIG_PIN			 GPIO_PIN_9
#define TRIG_PORT 			 GPIOA

#define ECHO_PIN 			 GPIO_PIN_8
#define ECHO_PORT 			 GPIOA

#define Traffic_RED		     1
#define Traffic_GREEN        2

#define ACC_Active	         1
#define ACC_DeActive	     2

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan;
TIM_HandleTypeDef htim1;


uint8_t ACC_State = ACC_Active;
uint8_t Traffic_Light=Traffic_GREEN;


uint32_t pMillis;
uint32_t flag;
uint32_t Value1 = 0;
uint32_t Value2 = 0;
uint32_t Distance  = 0;  // cm
uint16_t SAFE_DISTANCE =30;//cm

/*-----------------------------*/
//		G_Var_Speed
/*-----------------------------*/
uint16_t CURRENT_DISTANCE;
uint8_t EGO_SET_SPEED=100;
float EGO_SPEED;

/*-----------------------------*/
//		Distance Mapping
/*-----------------------------*/
DisToSpd_Parameters_t Parmeters;


/*-----------------------------*/
//		CAN-Parameters
/*-----------------------------*/
//unsigned char Data[8]={250,140,113,15,144,255,253,7};
uint16_t RX_ID;
uint8_t RX_DLC;
unsigned char Data[8]={'S',100};
unsigned char DataRX[8]={1};


/* USER CODE BEGIN PV */
Task_ref Task1, Task2, Task3, Task4 ;
unsigned char Task1LED,Task2LED,Task3LED,Task4LED ;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */


//Ultrasonic Function
void Ultrasonic_Read(void);


//CAN RX Function
void CAN_Rx(uint16_t *ID, uint8_t* DLC,uint8_t* Payload,uint8_t Polling_Enable);
void CAN_RX____(uint32_t* STD_ID, uint8_t* DLC, uint8_t* payload,uint8_t POLLING_Enable );
//CAN TX Function
void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload);
void CAN_TX___(uint32_t STD_ID, uint8_t DLC, uint8_t* payload,uint8_t POLLING_Enable );
//Filter Function
void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK);


//Distance Task
void Distance_Task();
//CA TX Task
void CAN_TX_Task();
//CA RX Task
void CAN_RX_Task();
//Start_CAN
void CAN_Start_Task();


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
	flag = 1;

}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Distance_Task()
{
	//First Delay
	//	MYRTOS_TaskWait(11, &Task1);

	while (1){
		//		Task1LED ^= 1;

		//F_Excution_Start
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
		//		if((ACC_State == ACC_Active)&&(Traffic_Light==Traffic_GREEN))
		if(ACC_State == ACC_Active)
		{
			Ultrasonic_Read();
			CURRENT_DISTANCE = Distance;
//			Data[1]=Distance;

			if(CURRENT_DISTANCE>SAFE_DISTANCE)
			{
				EGO_SPEED = EGO_SET_SPEED;
				Data[1]=EGO_SPEED;
				//LED_ON
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

			}
			else
			{
				// Mapping speed to be 0 to 100
				EGO_SPEED=DistanceToSpeed(&Parmeters,CURRENT_DISTANCE);
				if((CURRENT_DISTANCE>5)&&(CURRENT_DISTANCE<10))
				{
					EGO_SPEED = 20;
				}
				else if((CURRENT_DISTANCE>10)&&(CURRENT_DISTANCE<15))
				{
					EGO_SPEED = 40;
				}
				else if((CURRENT_DISTANCE>15)&&(CURRENT_DISTANCE<20))
				{
					EGO_SPEED = 60;
				}
				else if((CURRENT_DISTANCE>20)&&(CURRENT_DISTANCE<30))
				{
					EGO_SPEED = 75;
				}
				Data[1]=EGO_SPEED;
				//LED_OFF
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);

			}
		}
		else
		{
			//Do nothing

		}
		//F_Excution_End
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);

		MYRTOS_TaskWait(800, &Task1);
	}
}
void CAN_TX_Task()
{
	MYRTOS_TaskWait(100, &Task2);

	while (1){
		//		Task2LED ^= 1;
		//		if((ACC_State == ACC_Active)&&(Traffic_Light==Traffic_GREEN))

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);

		if(ACC_State == ACC_Active)
		{
			//Send CAN Message with speed Value
			CAN_Tx(0x4, 8, Data);
		}
		else
		{
			//Do nothing
		}

		//MYRTOS_TaskWait(1006, &Task2);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);

		MYRTOS_TaskWait(500, &Task2);


	}
}

void CAN_RX_Task()
{

	while (1){
		//		Task3LED ^= 1;

		//		if(ACC_State == ACC_Active)
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

			if(flag==1)
			{
				flag = 0;
				CAN_Rx(&RX_ID, &RX_DLC, DataRX,0);
				if(DataRX[0]==65)
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

				}
				//				else (DataRX[0]==66)
				else
				{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
				}
			}

			//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
			//Receive Traffic light state
			//			CAN_Rx(&RX_ID, &RX_DLC, DataRX,1);
			//			Traffic_Light = DataRX[0];
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);

		}

		MYRTOS_TaskWait(500, &Task3);
	}
}

void CAN_Start_Task()
{

	while (1){
		//
		//F_Excution_Start
		//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
		//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
		//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);

//		if(HAL_OK!=HAL_CAN_Start(&hcan))
//		{
//			Error_Handler();
//
//		}
		//LED_OFF
		//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);

		ACC_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
		MYRTOS_TaskWait(10, &Task4);

	}
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	/* USER CODE BEGIN 1 */
	MYRTOS_errorID error;
	//	HW_init();

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_CAN_Init();
	MX_TIM1_Init();
	/* USER CODE BEGIN 2 */
	//	CAN_RXFilterInit( 0x2, 0x000);

	__NVIC_SetPriority(PendSV_IRQn, 15) ;
	if (MYRTOS_init() != NoError)
		while (1);

	Task1.Stack_Size = 1024 ;
	Task1.p_TaskEntry =Distance_Task;
	Task1.priority= 1 ;
	strcpy (Task1.TaskName, "Distance_Task");

	Task2.Stack_Size = 1024 ;
	Task2.p_TaskEntry =CAN_TX_Task;
	Task2.priority= 1 ;
	strcpy (Task2.TaskName, "CAN_TX_Task");

	Task3.Stack_Size = 1024 ;
	Task3.p_TaskEntry =CAN_RX_Task;
	Task3.priority= 1 ;
	strcpy (Task3.TaskName, "CAN_RX_Task");

	Task4.Stack_Size = 1024 ;
	Task4.p_TaskEntry =CAN_Start_Task;
	Task4.priority= 1 ;
	strcpy (Task4.TaskName, "CAN_Start_Task");

	//Mapping Parameter
	Parmeters.copy_u16MaxDistance=20;
	Parmeters.copy_u16MaxSpeed = 100;
	Parmeters.copy_u16MinDistance=0;
	Parmeters.copy_u16MinSpeed=0;


	error += MYRTOS_CreateTask(&Task1);
	error += MYRTOS_CreateTask(&Task2);
	// error += MYRTOS_CreateTask(&Task3);
//		error += MYRTOS_CreateTask(&Task4);

	MYRTOS_ActivateTask(&Task1);
	MYRTOS_ActivateTask(&Task2);
	// MYRTOS_ActivateTask(&Task3);
//		MYRTOS_ActivateTask(&Task4);

	//Enable IRQs
	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
	{
		Error_Handler();
	}


	if(HAL_OK!=HAL_CAN_Start(&hcan))
	{
		Error_Handler();

	}

	MYRTOS_STARTOS() ;

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{

	/* USER CODE BEGIN CAN_Init 0 */

	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
	hcan.Init.Prescaler = 8;
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
	hcan.Init.TimeTriggeredMode = DISABLE;
	hcan.Init.AutoBusOff = DISABLE;
	hcan.Init.AutoWakeUp = DISABLE;
	hcan.Init.AutoRetransmission = ENABLE;
	hcan.Init.ReceiveFifoLocked = DISABLE;
	hcan.Init.TransmitFifoPriority = DISABLE;
	if (HAL_CAN_Init(&hcan) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
	TIM_MasterConfigTypeDef sMasterConfig = {0};

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 71;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 65535;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
	{
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* Enable and set EXTI Line3 interrupt */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
}

/* USER CODE BEGIN 4 */


void Ultrasonic_Read(void)
{
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);

	HAL_TIM_Base_Start(&htim1);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick()); //
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);

	//	Distance = (Value2-Value1)/58;
	Distance = (Value2-Value1)* 0.034/2;
	//	HAL_Delay(100);
	//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);

}



/***************************************************************************************************
 * 				CAN Functions
 * ************************************************************************************************/


/*--------------------------------------------------------
 * 				TX Can Function
 * -------------------------------------------------------*/

void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload)
{
	uint8_t Num_Of_TxMailboxes=0;
	uint32_t pTxMailbox=0;
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
	pHeader.RTR=CAN_RTR_DATA;
	pHeader.IDE=CAN_ID_STD;
	pHeader.StdId=ID;

	//	(++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
	//	mailboxes.
	Num_Of_TxMailboxes=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);


	if(Num_Of_TxMailboxes)
	{
		//	(++) HAL_CAN_AddTxMessage() to request transmission of a new
		//	message.
		if(HAL_OK!=HAL_CAN_AddTxMessage(&hcan,&pHeader,Payload,&pTxMailbox))
		{
			Error_Handler();
		}

		//	(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//	in a Tx mailbox.


		while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));


	}

}

/*--------------------------------------------------------
 * 				RX CAN Filter Function
 * -------------------------------------------------------*/
void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK)
{

	//	 (#) Configure the reception filters using the following configuration
	//	          functions:
	//	            (++) HAL_CAN_ConfigFilter()

	CAN_FilterTypeDef sFilterConfig;

	//Modes
	sFilterConfig.FilterActivation =CAN_FILTER_ENABLE;
	sFilterConfig.FilterBank =0; // Min0 , Max 13
	sFilterConfig.FilterMode =CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale =CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;

	//Filter Mask
	sFilterConfig.FilterMaskIdLow =0;
	sFilterConfig.FilterMaskIdHigh =(STD_ID_MASK<<5);
	//Filter ID
	sFilterConfig.FilterIdLow =0;
	sFilterConfig.FilterIdHigh =(STD_ID<<5);


	if(HAL_OK!=HAL_CAN_ConfigFilter(&hcan,&sFilterConfig))
	{
		Error_Handler();
	}

}


/*--------------------------------------------------------
 * 				RX CAN Function
 * -------------------------------------------------------*/
void CAN_Rx(uint16_t *ID, uint8_t *DLC,uint8_t* Payload,uint8_t Polling_Enable)
{

	CAN_RxHeaderTypeDef pHeader;


	//    (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
	//         until at least one message is received.
	//    (++) Then get the message using HAL_CAN_GetRxMessage().

	//wait until a message come to FifoRx0
	//	if(Polling_Enable)
	//	{
	while(0==HAL_CAN_GetRxFifoFillLevel(&hcan,CAN_RX_FIFO0));

	//	}

	if(	HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&pHeader,Payload)!=HAL_OK)
		Error_Handler();

	//fill data
	*DLC=pHeader.DLC;
	*ID=pHeader.StdId;

}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}





//=======================================================
//						V2.0 CAN
//=======================================================

void CAN_TX___(uint32_t STD_ID, uint8_t DLC, uint8_t* payload,uint8_t POLLING_Enable )
{
	uint8_t No_Free_MailBoxes = 0 ;
	uint32_t pTxMailbox=0;
	CAN_TxHeaderTypeDef pHeader ;
	pHeader.DLC = DLC;
	pHeader.StdId = STD_ID;
	pHeader.IDE = CAN_ID_STD;
	pHeader.RTR = CAN_RTR_DATA;
	/*(++) Monitor the Tx mailboxes availability until at least one Tx
	                 mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().*/
	No_Free_MailBoxes = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
	if(No_Free_MailBoxes)
	{
		//	 (++) Then request transmission of a message using
		//                 HAL_CAN_AddTxMessage().
		if (HAL_CAN_AddTxMessage(&hcan, &pHeader,payload,&pTxMailbox) != HAL_OK)
		{
			Error_Handler();
		};
		//wait untill mail box is transmitted
		//		(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//		                 in a Tx mailbox.
		if(POLLING_Enable){
			while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));
		}

	}
}

void CAN_RX____(uint32_t* STD_ID, uint8_t* DLC, uint8_t* payload,uint8_t POLLING_Enable )
{
	CAN_RxHeaderTypeDef pHeade;
	//	(#) Reception:
	//	   (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
	//	             until at least one message is received.
	//	      (++) Then get the message using HAL_CAN_GetRxMessage().

	//wait unitll message recieved
	if(POLLING_Enable){
		while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_FILTER_FIFO0) == 0);
	}

	if(HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&pHeade,payload)!=HAL_OK){
		Error_Handler();
	}
	*STD_ID = pHeade.StdId;
	*DLC =pHeade.DLC;

}

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//	ACC_State^=1;
//
//}

void EXTI3_IRQHandler(void)
{
	if (EXTI->PR & EXTI_PR_PR3) // Check if EXTI3 interrupt flag is set
	{
		ACC_State ^= 1; // XOR the global variable with 1

		// Clear the interrupt flag
		EXTI->PR |= EXTI_PR_PR3;
	}
}



//void HAL_CAN_Rx

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
