
/* Includes ------------------------------------------------------------------*/
#include "main.h"

CAN_HandleTypeDef hcan;
TIM_HandleTypeDef htim1;


#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA
#define ECHO_PIN GPIO_PIN_8
#define ECHO_PORT GPIOA
uint32_t pMillis;
uint32_t Value1 = 0;
uint32_t Value2 = 0;
uint32_t Distance  = 0;  // cm



/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_CAN_Init(void);
//Ultrasonic Function
void Ultrasonic_Read(void);
//CAN RX Function
void CAN_Rx(uint16_t *ID, uint8_t* DLC,uint8_t* Payload);
//CAN TX Function
void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload);
//Filter Function
void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK);
//Test schedular
void Task1(void);

int main(void)
{

	HAL_Init();

	/* Configure the system clock */
	SystemClock_Config();


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_CAN_Init();
	MX_TIM1_Init();
	SysTick_voidInit();

	RTOS_voidNewTask(1, 0, Task1, 0);



	while (1)
	{
		Ultrasonic_Read();
	//	HAL_Delay(100);
		if(Distance > 15)
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
		}


	}
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
	{
		Error_Handler();
	}
}

/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{

	/* USER CODE BEGIN CAN_Init 0 */

	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
	hcan.Init.Prescaler = 8;
	hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
	hcan.Init.TimeTriggeredMode = DISABLE;
	hcan.Init.AutoBusOff = DISABLE;
	hcan.Init.AutoWakeUp = DISABLE;
	hcan.Init.AutoRetransmission = DISABLE;
	hcan.Init.ReceiveFifoLocked = DISABLE;
	hcan.Init.TransmitFifoPriority = DISABLE;
	if (HAL_CAN_Init(&hcan) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}

/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
	TIM_MasterConfigTypeDef sMasterConfig = {0};

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
	htim1.Init.Prescaler = 71;
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim1.Init.Period = 65535;
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim1.Init.RepetitionCounter = 0;
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
	{
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
	{
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
	{
		Error_Handler();
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void Ultrasonic_Read(void)
{
	HAL_TIM_Base_Start(&htim1);
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
	//		__HAL_TIM_SET_COUNTER(&htim1, 0);
	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
	Value1 = __HAL_TIM_GET_COUNTER (&htim1);

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
	Value2 = __HAL_TIM_GET_COUNTER (&htim1);

	Distance = (Value2-Value1)/58;
	//		Distance = (Value2-Value1)* 0.034/2;
	//	HAL_Delay(100);


}



/********************************************************
 * 				CAN Functions
 * ******************************************************/


/*--------------------------------------------------------
 * 				TX Can Function
 * -------------------------------------------------------*/

void CAN_Tx(uint32_t ID, uint8_t DLC,uint8_t* Payload)
{
	uint8_t Num_Of_TxMailboxes=0;
	uint8_t pTxMailbox=0;
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC=DLC;
	pHeader.RTR=CAN_RTR_DATA;
	pHeader.IDE=CAN_ID_STD;
	pHeader.StdId=ID;

	//	(++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
	//	mailboxes.
	Num_Of_TxMailboxes=HAL_CAN_GetTxMailboxesFreeLevel(&hcan);


	if(Num_Of_TxMailboxes)
	{
		//	(++) HAL_CAN_AddTxMessage() to request transmission of a new
		//	message.
		if(HAL_OK!=HAL_CAN_AddTxMessage(&hcan,&pHeader,Payload,&pTxMailbox))
		{
			Error_Handler();
		}

		//	(++) HAL_CAN_IsTxMessagePending() to check if a message is pending
		//	in a Tx mailbox.

		while(HAL_CAN_IsTxMessagePending(&hcan,pTxMailbox));
	}

}




/*--------------------------------------------------------
 * 				RX CAN Filter Function
 * -------------------------------------------------------*/
void CAN_RXFilterInit(uint16_t STD_ID,uint16_t STD_ID_MASK)
{

	//	 (#) Configure the reception filters using the following configuration
	//	          functions:
	//	            (++) HAL_CAN_ConfigFilter()

	CAN_FilterTypeDef sFilterConfig;

	//Modes
	sFilterConfig.FilterActivation =CAN_FILTER_ENABLE;
	sFilterConfig.FilterBank =0; // Min0 , Max 13
	sFilterConfig.FilterMode =CAN_FILTERMODE_IDMASK;
	sFilterConfig.FilterScale =CAN_FILTERSCALE_32BIT;
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;

	//Filter Mask
	sFilterConfig.FilterMaskIdLow =0;
	sFilterConfig.FilterMaskIdHigh =(STD_ID_MASK<<5);
	//Filter ID
	sFilterConfig.FilterIdLow =0;
	sFilterConfig.FilterIdHigh =(STD_ID<<5);


	if(HAL_OK!=HAL_CAN_ConfigFilter(&hcan,&sFilterConfig))
	{
		Error_Handler();
	}

}


/*--------------------------------------------------------
 * 				RX CAN Function
 * -------------------------------------------------------*/
void CAN_Rx(uint16_t *ID, uint8_t *DLC,uint8_t* Payload)
{

	CAN_RxHeaderTypeDef pHeader;


	//    (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
	//         until at least one message is received.
	//    (++) Then get the message using HAL_CAN_GetRxMessage().

	//wait untill a message come to FifoRx0
	while(0==HAL_CAN_GetRxFifoFillLevel(&hcan,CAN_RX_FIFO0));

	if(	HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&pHeader,Payload)!=HAL_OK)
		Error_Handler();

	//fill data
	*DLC=pHeader.DLC;
	*ID=pHeader.StdId;

}

void Task1(void)
{
	static uint8_t PinState=1;
	PinState^=1;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, PinState);

}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
	{

	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
