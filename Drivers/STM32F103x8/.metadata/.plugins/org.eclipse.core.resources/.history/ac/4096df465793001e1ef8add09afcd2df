/*
 * Schedular.c
 *
 *  Created on: Dec 4, 2023
 *      Author: Mustafa Hafez
 */


#include "Schedular.h"
#include "CortexMX_OS_Porting.h"
#include "MYRTOS_FIFO.h"
#include "string.h"

#define Activate_Task	0
#define Terminate_Task	1
#define Task_Numbers	100

struct {
	Task_ref_t* OS_Tasks[Task_Numbers];
	uint32_t _S_MSP_Task;
	uint32_t _E_MSP_Task;
	uint32_t PSP_Task_Locater; // help in locating tasks
	uint32_t Active_Tasks_num;
	Task_ref_t* Current_Task;
	Task_ref_t* Next_Task;
	enum{
		OS_Suspend,
		OS_Running
	}OS_Mode;

}OS_Control;

FIFO_Buf_t Ready_QUEUE;
Task_ref_t* Ready_QUEUE_FIFO[Task_Numbers];

//Create Idle Task
 Task_ref_t Idle_Task;


void Reset_Handler		(void) 	{while(1);}
void NMI_Handler		(void)	{while(1);}
void HardFault_Handler	(void)  {while(1);}
void MemManage_Handler	(void)  {while(1);}
void BusFault_Handler	(void)  {while(1);}
void UsageFault_Handler	(void)  {while(1);}


void OS_SVC( int* Stack_Fram)
{
	unsigned char SVC_Number;
	SVC_Number = *((unsigned char*)(((unsigned char*)Stack_Fram[6])-2));
	switch(SVC_Number)
	{
	case Activate_Task:
		break;
	case Terminate_Task:
		break;

	default: break;
	}

}

void  OS_SVC_Set(int SVC_ID)
{
	switch(SVC_ID)
	{
	case 0 :
		__asm("svc #0x00");
		break;
	case 1 :
		__asm("svc #0x01");

		break;
	case 2 :
		__asm("svc #0x02");

		break;
	case 3 :
		__asm("svc #0x03");

		break;
	}
}




void PendSV_Handler(void)
{
while(1);
}


void RTOS_Init_Stack()
{
	// initialize main stack for OS
	OS_Control._S_MSP_Task = &_estack;
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - Main_Stack_Size;
	//Align 8 byte between Main Task and PSP tasks
	OS_Control.PSP_Task_Locater = OS_Control._E_MSP_Task - 8;


}

RTOS_ErrorState_t Eldeep_OSInit()
{

	RTOS_ErrorState_t Error_State = RTOS_NoError;

	//Update OS mode(suspend)
	OS_Control.OS_Mode = OS_Suspend;
	//Initialize Main stack for OS
	RTOS_Init_Stack();
	//create Tasks Ready Queue
	if(FIFO_init(&Ready_QUEUE,Ready_QUEUE_FIFO , Task_Numbers) !=FIFO_NO_ERROR)
	{
		Error_State+=RTOS_Ready_Queue_Error;
	}
	// configure IDLE Task
	Idle_Task.stack_size = 300;
	Idle_Task.priority = 255; //Lowest
	strcpy(Idle_Task.P_Task,"Idle_Task");
	Idle_Task.P_Task = Idle_Task_Handler;

	Eldeep_OSCreateTask(Task_ref_t* P_Task_cfg_t);
	return Error_State;
}






void Idle_Task_Handler(void)
{
	__asm("NOP");
}





Eldeep_OSCreateTask(Task_ref_t* P_Task_cfg_t)
{

}




