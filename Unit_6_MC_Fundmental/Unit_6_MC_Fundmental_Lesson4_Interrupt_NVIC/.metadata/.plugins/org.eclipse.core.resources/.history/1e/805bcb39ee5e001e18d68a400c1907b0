/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define PA1			1
#define PA13		1

#define PB1			11
#define PB13		12

#define DELAY(n)	for(int i =0; i<n;i++)\
					for(int j = 0; j<255;j++);


typedef	volatile unsigned int vuint32_t;

#define RCC_BASE			0x40021000
#define RCC_APB2ENR			*(volatile vuint32_t*)(RCC_BASE+ 0x18)
#define RCC_CFGR			*(volatile vuint32_t*)(RCC_BASE+ 0x04)



#define GPIOA_BASE			0x40010800
#define GPIOA_CRH			*(volatile vuint32_t*)(GPIOA_BASE+ 0x04)
#define GPIOA_CRL			*(volatile vuint32_t*)(GPIOA_BASE+ 0x00)
#define GPIOA_ODR			*(volatile vuint32_t*)(GPIOA_BASE+ 0x0c)



void Clock_Init()
{
	/*IO port A clock enable*/
	RCC_APB2ENR |=(1<<2);
	/*AFIOEN: Alternate function IO clock enable*/
	RCC_APB2ENR|=(1<<0);

}

void GPIO_Init()
{
	/*Make PA13 output*/
	GPIOA_CRH &=0xFF0FFFFF;
	GPIOA_CRH |=0x00200000;
	/*Make PA0 floating input*/
	GPIOA_CRL |= (1<<2);

}

int main(void)
{
	/*Initialization*/
	Clock_Init();
//	EXTI_Init();
	GPIO_Init();


	while(1)
	{

		/*Single press*/
		if(PA1==0) //pressed
		{
			PB1 ^= 1;
			while(PA1==0);


		}

		/*Multi Press*/
		if(PA13==1) //pressed
				{

				PB13 ^= 1;
				DELAY(1);


				}
	}
}

