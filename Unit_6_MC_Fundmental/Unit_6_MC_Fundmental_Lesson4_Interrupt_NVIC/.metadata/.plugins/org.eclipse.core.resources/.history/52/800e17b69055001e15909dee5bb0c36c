/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

typedef	volatile unsigned int vuint32_t;

#define RCC_BASE			0x40021000
#define RCC_APB2ENR			*(volatile vuint32_t*)(RCC_BASE+ 0x18)
#define RCC_CFGR			*(volatile vuint32_t*)(RCC_BASE+ 0x04)


#define GPIOA_BASE			0x40010800
#define GPIOA_CRH			*(volatile vuint32_t*)(GPIOA_BASE+ 0x04)
#define GPIOA_ODR			*(volatile vuint32_t*)(GPIOA_BASE+ 0x0c)

#define EXTI_BASE			0x40010400
#define EXTI_IMR			*(volatile vuint32_t*)(EXTI_BASE+ 0x00)
#define EXTI_RTSR			*(volatile vuint32_t*)(EXTI_BASE+ 0x08)

#define AFIO_BASE			0x40010000
#define AFIO_EXTICR1		*(volatile vuint32_t*)(AFIO_BASE+ 0x08)





void Clock_Init()
{
	/*IO port A clock enable*/
	RCC_APB2ENR|=(1<<2);
	/*AFIOEN: Alternate function IO clock enable*/
	RCC_APB2ENR|=(1<<0);

}

void EXTI_Init()
{
	/*Rising Edge Trigger Selection on PA0 ---> set EXTI_RTSR Pin0 by 1*/
	EXTI_RTSR |= (1<<0);
	/*Mapping PA0 to EXTI peripheral from AFIO_EXTICR1 Register*/
	AFIO_EXTICR1 |= (0b0000<<4);
	/*Enable bit mask of PA0 from EXTI_IMR*/
	EXTI_IMR |=(1<<0);

}

int main(void)
{
	/*Initialization*/


	GPIOA_CRH&=0xFF0FFFFF;
	GPIOA_CRH|=0x00200000;

	while(1)
	{

	}
}

void ISR()
{

	/*Toggle PINA.13*/
	GPIOA_ODR ^= (1<<13);
	/*Clear pending request of EXTI ---> Write 1 on EXTI_PR PR0*/
	EXTI_PR |=(1<<0);
}
